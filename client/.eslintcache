[{"C:\\Users\\mehar\\github\\3-project\\client\\src\\index.js":"1","C:\\Users\\mehar\\github\\3-project\\client\\src\\App.js":"2","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Timesheet\\Timesheet.js":"3","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\ReactDND.js":"4","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\initial-data.js":"5","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\column.js":"6","C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\contexts\\UpdateToDoContext.js":"7","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\task.js":"8","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\NewTaskAddBox\\NewTaskAddBox.js":"9","C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\API.js":"10","C:\\Users\\mehar\\github\\3-project\\client\\src\\Auth.js":"11","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Landing\\Landing.js":"12","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Navbar\\Navbar.js":"13","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Login\\login.js":"14","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Register\\register.js":"15","C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\userFunctions.js":"16","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Tasks\\Tasks.js":"17","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Admin\\Admin.js":"18","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\Team.js":"19","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\engagementPDF.js":"20","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\TableHead.js":"21","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Timesheet\\TableHead.js":"22"},{"size":351,"mtime":1613022855922,"results":"23","hashOfConfig":"24"},{"size":5529,"mtime":1613541805840,"results":"25","hashOfConfig":"24"},{"size":11961,"mtime":1613544086040,"results":"26","hashOfConfig":"24"},{"size":16409,"mtime":1613544337829,"results":"27","hashOfConfig":"24"},{"size":817,"mtime":1613540363226,"results":"28","hashOfConfig":"24"},{"size":3149,"mtime":1613307118425,"results":"29","hashOfConfig":"24"},{"size":115,"mtime":1611294788240,"results":"30","hashOfConfig":"24"},{"size":7108,"mtime":1613313871683,"results":"31","hashOfConfig":"24"},{"size":1013,"mtime":1613289174603,"results":"32","hashOfConfig":"24"},{"size":683,"mtime":1612967803732,"results":"33","hashOfConfig":"24"},{"size":454,"mtime":1612343868380,"results":"34","hashOfConfig":"24"},{"size":2206,"mtime":1613544453176,"results":"35","hashOfConfig":"24"},{"size":5233,"mtime":1613536810308,"results":"36","hashOfConfig":"24"},{"size":2928,"mtime":1613314982478,"results":"37","hashOfConfig":"24"},{"size":11103,"mtime":1613314778336,"results":"38","hashOfConfig":"24"},{"size":2665,"mtime":1612918056970,"results":"39","hashOfConfig":"24"},{"size":2180,"mtime":1613541768030,"results":"40","hashOfConfig":"24"},{"size":14618,"mtime":1613302262995,"results":"41","hashOfConfig":"24"},{"size":14280,"mtime":1613312326004,"results":"42","hashOfConfig":"24"},{"size":3881,"mtime":1613370415303,"results":"43","hashOfConfig":"24"},{"size":3367,"mtime":1613190008817,"results":"44","hashOfConfig":"24"},{"size":2300,"mtime":1613298517334,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1qrquh3",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"C:\\Users\\mehar\\github\\3-project\\client\\src\\index.js",[],["93","94"],"C:\\Users\\mehar\\github\\3-project\\client\\src\\App.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Timesheet\\Timesheet.js",["95"],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\ReactDND.js",["96"],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\initial-data.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\column.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\contexts\\UpdateToDoContext.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\task.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\NewTaskAddBox\\NewTaskAddBox.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\API.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\Auth.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Landing\\Landing.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Navbar\\Navbar.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Login\\login.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Register\\register.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\userFunctions.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Tasks\\Tasks.js",["97","98","99"],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Admin\\Admin.js",["100","101","102","103","104","105","106"],"import React, { Component } from 'react';\nimport jwt_decode from 'jwt-decode';\nimport API from '../../utils/apis/API';\nimport { registerUser, getUsers, getOneUser, registerEng, getOneTeam, removeUser } from '../../utils/apis/userFunctions';\nimport initialData from '../../components/ReactDND/initial-data';\nimport './Admin.css';\nimport { Modal } from 'react-bootstrap';\n\nclass Admin extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            teamName: '',\n            first_name: '',\n            last_name: '',\n            email: '',\n            password: '',\n            admin: false,\n            firstLogin: '',\n            engagement: '',\n            removeEmail: '',\n            empCost: 0,\n            removeAlertShow: false,\n            addAlertShow: false,\n            errors: {}\n        }\n    }\n    token = localStorage.usertoken;\n    decoded = jwt_decode(this.token);\n\n    handleValidation = () => {\n        let errors = {};\n        let formIsValid = true;\n\n        // email\n        const inputEmail = this.state.email;\n        const emailRegex = /^\\w+([\\.-]?\\w+)*@[a-z]+([\\.-]?[a-z]+)*(\\.[a-z]{2,4})+$/;\n        const emailResult = emailRegex.test(inputEmail);\n        if (!this.state.email.trim()) {\n            formIsValid = false;\n            errors[\"email\"] = \"Cannot be empty\";\n        }\n        else if (!emailResult) {\n            formIsValid = false;\n            errors[\"email\"] = \"Email is not valid\";\n        }\n        else {}\n\n\n        // firstName\n        if (!this.state.first_name.trim()) {\n            formIsValid = false;\n            errors[\"first_name\"] = \"Cannot be empty\";\n        }\n        else if (typeof this.state.first_name !== \"undefined\") {\n            if (!this.state.first_name.match(/^[a-zA-Z]+$/)) {\n                formIsValid = false;\n                errors[\"first_name\"] = \"Only letters\";\n            }\n        }\n        else {}\n\n        // lastName\n        if (!this.state.last_name.trim()) {\n            formIsValid = false;\n            errors[\"last_name\"] = \"Cannot be empty\";\n        }\n        else if (!this.state.last_name.match(/^[a-zA-Z]+$/)) {\n            formIsValid = false;\n            errors[\"last_name\"] = \"Only letters\";\n        }\n        else {}\n\n        // empCost\n        if (this.state.empCost === 0) {\n            formIsValid = false;\n            errors[\"empCost\"] = \"Cannot be equal to 0\";\n        }\n\n        this.setState({ errors: errors });\n        return formIsValid;\n    }\n\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    onAdminChange = event => {\n\n        if (event.target.value === \"Yes\") {\n            this.setState({ admin: true })\n        } else {\n            this.setState({ admin: false })\n        }\n    }\n\n    // Add new team member to db\n    onTeamMemberSubmit = (event) => {\n        let errors= {};\n\n        event.preventDefault();\n\n        const userData = {\n            teamName: this.decoded.teamName.trim(),\n            first_name: this.state.first_name.trim(),\n            last_name: this.state.last_name.trim(),\n            email: this.state.email.trim().toLowerCase(),\n            password: 'init01',\n            empCost: this.state.empCost,\n            admin: this.state.admin,\n            firstLogin: true\n        };\n\n        const validationResult = this.handleValidation();\n\n        if (validationResult) {\n            getUsers().then(async data => {\n                const destination = data.map(element => {\n                    if (element.email === this.state.email.trim().toLowerCase()) {\n                        console.log('foundmatch');\n                        return true;\n                    }\n                }).filter(item => { return item; })[0];\n                // Check if email exists in db or not\n                if (!destination) {\n                    registerUser(userData).then(() => {\n                        getOneUser(userData).then(async res => {\n                            // console.log(res);\n                            initialData._id = res[0]._id;\n                            initialData.teamName = res[0].teamName;\n                            initialData.empCost = res[0].empCost;\n                            await API.createBoard(initialData).catch(err => console.log(err));\n                        })\n                    })\n                    .then(() => {\n                        // To clear form input fields on successful user registration\n                        this.setState({ \n                            first_name: \"\",\n                            last_name: \"\",\n                            email: \"\",\n                            empCost: 0,\n                            addAlertShow: true\n                        })\n                    })\n                    .catch(err => console.log(err))\n                }\n                else {\n                    errors[\"email\"] = \"Email already exists\";\n                    this.setState({ errors: errors });\n                }\n            })\n        }\n    }\n\n    // Add new engagement to db\n    onEngagementsSubmit = event => {\n        let errors = {};\n\n        event.preventDefault();\n\n        const engData = {\n            engName: this.state.engagement.toLowerCase(),\n            teamName: this.decoded.teamName\n        }\n\n        getOneTeam(engData.teamName).then(async data => {\n\n            const destination = data.engagements.map(el => {\n                if (el === this.state.engagement.toLowerCase()) {\n                    errors['engagement'] = \"Your team is already using this name\";\n                    this.setState({ errors: errors });\n                    return true;\n                } \n            }).filter(item => { return item; })[0];\n\n            if (!destination) {\n                registerEng(engData);\n\n                this.setState({ \n                    engagement: \"\",\n                    errors: \"\"\n                })\n            }\n        })\n    }\n\n    onTeamMemberRemove = event => {\n        let errors = {};\n        let formIsValid = true;\n\n        event.preventDefault();\n\n        // Validate email\n        const inputEmail = this.state.removeEmail;\n        const emailRegex = /^\\w+([\\.-]?\\w+)*@[a-z]+([\\.-]?[a-z]+)*(\\.[a-z]{2,4})+$/;\n        const emailResult = emailRegex.test(inputEmail);\n\n        if (!this.state.removeEmail.trim()) {\n            formIsValid = false;\n            errors[\"removeEmail\"] = \"Cannot be empty\";\n        }\n        else if (!emailResult) {\n            formIsValid = false;\n            errors[\"removeEmail\"] = \"Email is not valid\";\n        }\n        else {}\n\n        this.setState({ errors: errors });\n\n        if (formIsValid) {\n            getUsers().then(async data => {\n                const destination = data.map(element => {\n                    if (element.email === this.state.removeEmail.trim().toLowerCase()) {\n                        return true;\n                    }\n                }).filter(item => { return item; })[0];\n                // Check if email exists in db or not\n                if (!destination) {\n                    errors[\"removeEmail\"] = \"No team member is registered with this email\";\n                    this.setState({ errors: errors });\n                }\n                else {\n                    getOneUser({ email: this.state.removeEmail }).then(res => {\n                        API.deleteBoard(res[0]._id);\n                    })\n                    removeUser(this.state.removeEmail);\n                    this.setState({ \n                        removeAlertShow: true,\n                        removeEmail: \"\"\n                    });\n                }\n            })  \n        }\n    }\n\n    render() {\n        return (\n            <div className=\"container adminForms\">\n                <div className=\"row\">\n                    <div className=\"col-sm-12\">\n                        <h1 className=\"heading\">Admin</h1>\n                    </div>\n                </div>\n                <br></br>\n                <div className=\"row\">\n                    <div className=\"col-sm-8\">\n                        <form onSubmit={this.onTeamMemberSubmit}>\n                            <h3>Add Team Members</h3>\n                            <div className='form-group'>\n                                <label htmlFor='first_name'>First Name</label>\n                                <input type='text'\n                                    refs='first_name'\n                                    className='form-control'\n                                    name='first_name'\n                                    placeholder='Enter First Name'\n                                    value={this.state.first_name}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"first_name\"]}</span>\n                            </div>\n                            <div className='form-group'>\n                                <label htmlFor='last_name'>Last Name</label>\n                                <input type='text'\n                                    refs='last_name'\n                                    className='form-control'\n                                    name='last_name'\n                                    placeholder='Enter Last Name'\n                                    value={this.state.last_name}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"last_name\"]}</span>\n                            </div>\n                            <div className='form-group'>\n                                <label htmlFor='email'>Email Address</label>\n                                <input type='email'\n                                    refs='email'\n                                    className='form-control'\n                                    name='email'\n                                    placeholder='Enter Email'\n                                    value={this.state.email}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"email\"]}</span>\n                            </div>\n                            <div className='form-group'>\n                                <label htmlFor='empCost'>Cost per hour</label>\n                                <input type='number'\n                                    refs='empCost'\n                                    className='form-control'\n                                    name='empCost'\n                                    placeholder='Enter Employee Cost (per hour)'\n                                    value={this.state.empCost}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"empCost\"]}</span>\n                            </div>\n                            <div className='form-group'>\n                                <label>Admin</label>&nbsp;\n                                <select name=\"admin\" onChange={this.onAdminChange}>\n                                    <option>No</option>\n                                    <option>Yes</option>\n                                </select>\n                            </div>\n                            <button type='submit' className='btn btn-lg btn-primary btn-block'>Add</button>\n                        </form>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <form onSubmit={this.onTeamMemberRemove}>\n                            <h3>Remove Team Members</h3>\n                            <div className='form-group'>\n                                <label htmlFor='removeEmail'>Email Address</label>\n                                <input type='email'\n                                    refs='removeEmail'\n                                    className='form-control'\n                                    name='removeEmail'\n                                    placeholder='Enter Email'\n                                    value={this.state.removeEmail}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"removeEmail\"]}</span>\n                            </div>\n                            <button type='submit' className='btn btn-lg btn-danger btn-block'>Remove</button>\n                        </form>\n                    </div>\n                </div>\n                <br></br> \n                <div className=\"row\">\n                    <div className=\"col-sm-8\">\n                        <h3>Add New Engagement</h3>\n                        <form onSubmit={this.onEngagementsSubmit}>\n                            <div className='form-group'>\n                                <label htmlFor='engagement'>Engagement Name</label>\n                                <input type='text'\n                                    refs='engagement'\n                                    className='form-control'\n                                    name='engagement'\n                                    placeholder='Enter Engagement Name'\n                                    value={this.state.engagement}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"engagement\"]}</span>\n                            </div>\n                            <button type='submit' className='btn btn-lg btn-primary btn-block'>Add</button>\n                        </form>\n                    </div>\n                </div> \n                <Modal                 \n                    show={this.state.addAlertShow}\n                    onHide={() => this.setState({ addAlertShow: false })}\n                    keyboard={false}>\n                    <Modal.Header className=\"addMemberAlert\" closeButton><b>Team Member successfully added!</b></Modal.Header>\n                </Modal>   \n                <Modal                 \n                    show={this.state.removeAlertShow}\n                    onHide={() => this.setState({ removeAlertShow: false })}\n                    keyboard={false}>\n                    <Modal.Header className=\"removeMemberAlert\" closeButton><b>Team Member successfully removed!</b></Modal.Header>\n                </Modal>         \n            </div>\n        )\n    }\n}\n\nexport default Admin;","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\Team.js",["107","108"],"import React, { useEffect, useState } from 'react';\nimport jwt_decode from 'jwt-decode';\nimport { getOneTeam } from '../../utils/apis/userFunctions';\nimport API from '../../utils/apis/API';\nimport './Team.css';\n// import EngAccordion from './Accordion';\nimport MyDocument from './engagementPDF';\nimport {PDFDownloadLink } from '@react-pdf/renderer';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport endOfWeek from 'date-fns/endOfWeek';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Table, TableBody, TableCell, TableContainer, TablePagination, TableRow, Paper, FormControlLabel, Switch, Box, Menu, MenuItem, Button } from '@material-ui/core';\nimport EnhancedTableHead from './TableHead';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n        border: '1px solid #ff7256'\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nfunction Team() {\n\n    const token = localStorage.usertoken;\n    const decoded = jwt_decode(token);\n\n    const [engs, setEngs] = useState([]);\n\n    const dateToday = new Date();\n    const month = dateToday.getMonth() + 1;\n    const fullDate = dateToday.getDate() + '/' + month + '/' + dateToday.getFullYear();\n\n    let tempEngArr = [];\n    \n    // MUI Table data\n    const [rows, setRows] = useState([]);\n\n    // Variables for MUI Table\n    const classes = useStyles();\n    const [order, setOrder] = React.useState('desc');\n    const [orderBy, setOrderBy] = React.useState('cost');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [dense, setDense] = React.useState(false);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    // Show different report based on which button is clicked\n    const [showReport, setShowReport] = useState({\n        name: '',\n        tasks: {},\n        weekStart: '', \n        weekEnd: '',\n        view: false\n    });\n    \n\n    const storeEngagementNames = () => {\n\n        // Store content of each task with the same engagement name\n        getOneTeam(decoded.teamName).then(res => {\n\n            res.engagements.forEach(eng => {\n                tempEngArr.push({ engName: eng, tasks: [] });\n            })\n        }).then(() => {\n            renderEngagements();\n        }).then(() => {\n            setEngs(tempEngArr);\n        })\n    }\n    \n    const renderEngagements = () => {\n        API.getBoards().then(response => {    \n            response.data.forEach(el => {\n                if (el.teamName === decoded.teamName) {\n                    for (let key in el.tasks) {\n                        if (el.tasks[key].engagement !== \"\") {\n                            tempEngArr.map((eng, idx) => {\n                                if (eng.engName === el.tasks[key].engagement) {\n                                    tempEngArr[idx].tasks.push({employees: { ...el.tasks[key].employees }, content: el.tasks[key].content })\n                                }\n                            })\n                        }\n                    }\n                }\n            })\n        })  \n    }\n\n    // Required for PDF print & table data render\n    const renderClickedEngReport = event => {\n        event.preventDefault();\n        \n        // PDF Print\n        let tasks = {};\n        \n        const weekStart = startOfWeek(new Date(), {weekStartsOn: 1}).getDate()+ '/' + month + '/' + dateToday.getFullYear();\n        const weekEnd = endOfWeek(new Date(), {weekStartsOn: 1}).getDate() - 2 + '/' + month + '/' + dateToday.getFullYear();\n\n        engs.forEach(el => {\n            if (el.engName === event.target.id) {\n                tasks = {...el.tasks};\n            }\n        })\n        setShowReport({\n            name: event.target.id,\n            tasks: tasks,\n            weekStart: weekStart, \n            weekEnd: weekEnd,\n            view: true\n        })\n\n        // Table data render\n\n        const tempRowArr = [];\n        \n        engs.forEach((el, idx) => {\n            if (el.engName === event.target.id) {\n                el.tasks.forEach(task => {\n                    let taskCost = 0.00;\n                    let taskTime = 0.00;\n                    for (let empsKey in task.employees) {\n                        taskCost += parseFloat(task.employees[empsKey].cost);\n                        taskTime += parseFloat(task.employees[empsKey].overallTime);\n                    }\n                    tempRowArr.push(createData(task.content, taskTime, taskCost));\n                })\n            }\n        })\n        setRows(tempRowArr);\n    }\n\n    // Functions required for MUI Table\n    function createData(task, hours, cost) {\n        return { task, hours, cost };\n    }\n\n    function descendingComparator(a, b, orderBy) {\n        if (b[orderBy] < a[orderBy]) {\n            return -1;\n        }\n        if (b[orderBy] > a[orderBy]) {\n            return 1;\n        }\n        return 0;\n    }\n\n    function getComparator(order, orderBy) {\n        return order === 'desc'\n            ? (a, b) => descendingComparator(a, b, orderBy)\n            : (a, b) => -descendingComparator(a, b, orderBy);\n    }\n\n    function stableSort(array, comparator) {\n        const stabilizedThis = array.map((el, index) => [el, index]);\n        stabilizedThis.sort((a, b) => {\n            const order = comparator(a[0], b[0]);\n            if (order !== 0) return order;\n            return a[1] - b[1];\n        });\n        return stabilizedThis.map((el) => el[0]);\n    }\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n        const newSelecteds = rows.map((n) => n.task);\n        setSelected(newSelecteds);\n        return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, name) => {\n        const selectedIndex = selected.indexOf(name);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n        newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n        newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n        newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n        newSelected = newSelected.concat(\n            selected.slice(0, selectedIndex),\n            selected.slice(selectedIndex + 1),\n        );\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const handleChangeDense = (event) => {\n        setDense(event.target.checked);\n    };\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n    // Required for Engagements Menu\n    const ITEM_HEIGHT = 48;\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const open = Boolean(anchorEl);\n\n    const handleMenuClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n    };\n\n    useEffect(() => {\n        storeEngagementNames();\n    }, [])\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-sm-12\">\n                    <h1 className=\"teamNameEngPage\">{decoded.teamName}</h1>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-sm-12\">\n                    {/* <h3>Engagements</h3> */}\n                    <Button aria-label=\"more\" aria-controls=\"long-menu\" aria-haspopup=\"true\" onClick={handleMenuClick} variant=\"contained\" color=\"primary\">\n                        View Engagements\n                    </Button>\n                    <Menu\n                        id=\"long-menu\"\n                        anchorEl={anchorEl}\n                        keepMounted\n                        open={open}\n                        onClose={handleMenuClose}\n                        PaperProps={{\n                        style: {\n                            maxHeight: ITEM_HEIGHT * 4.5,\n                            width: '30ch',\n                        },\n                        }}\n                    >\n                        {engs.map((el, idx) => (\n                        <MenuItem key={el.engName} id={el.engName} onClick={renderClickedEngReport}>\n                            {el.engName}\n                        </MenuItem>\n                        ))}\n                    </Menu>\n                </div>\n            </div>\n            <hr></hr>\n            <div className=\"row\">\n                <div className=\"col-sm-12\">\n                    {showReport.view ? ( <div>\n                        <h2 className=\"engName\">{showReport.name.toUpperCase()} Report</h2>\n                        <br></br>\n                        <div className={classes.root}>\n                            <Paper className={classes.paper}>\n                                <TableContainer>\n                                    <Table\n                                        className={classes.table}\n                                        aria-labelledby=\"tableTitle\"\n                                        size={dense ? 'small' : 'medium'}\n                                        aria-label=\"enhanced table\"\n                                    >\n                                        <EnhancedTableHead\n                                            classes={classes}\n                                            numSelected={selected.length}\n                                            order={order}\n                                            orderBy={orderBy}\n                                            onSelectAllClick={handleSelectAllClick}\n                                            onRequestSort={handleRequestSort}\n                                            rowCount={rows.length}\n                                        />\n                                        <TableBody>\n                                        {stableSort(rows, getComparator(order, orderBy))\n                                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                            .map((row, index) => {\n                                            const isItemSelected = isSelected(row.task);\n                                            const labelId = `enhanced-table-checkbox-${index}`;\n\n                                            return (\n                                                <TableRow\n                                                hover\n                                                onClick={(event) => handleClick(event, row.task)}\n                                                role=\"checkbox\"\n                                                aria-checked={isItemSelected}\n                                                tabIndex={-1}\n                                                key={index}\n                                                selected={isItemSelected}\n                                                >\n                                                    <TableCell component=\"td\" id={labelId} scope=\"row\" align=\"left\">\n                                                        <Box pl={3}>\n                                                            {row.task}\n                                                        </Box>\n                                                    </TableCell>\n                                                    <TableCell align=\"center\">{row.hours}</TableCell>\n                                                    <TableCell align=\"center\">{row.cost}</TableCell>\n                                                </TableRow>\n                                            );\n                                            })}\n                                        {emptyRows > 0 && (\n                                            <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                                            <TableCell colSpan={6} />\n                                            </TableRow>\n                                        )}\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                                <TablePagination\n                                rowsPerPageOptions={[5, 10, 25]}\n                                component=\"div\"\n                                count={rows.length}\n                                rowsPerPage={rowsPerPage}\n                                page={page}\n                                onChangePage={handleChangePage}\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\n                                />\n                            </Paper>\n                            <FormControlLabel\n                                control={<Switch checked={dense} onChange={handleChangeDense} />}\n                                label=\"Dense padding\"\n                            />\n                        </div>\n                        <br></br>\n                        <PDFDownloadLink className=\"btn btn-primary pdfDownloadLink\" document={<MyDocument name={showReport.name.toUpperCase()} tasks={showReport.tasks} weekStart={showReport.weekStart} weekEnd={showReport.weekEnd}/>} fileName={showReport.name + '-' + fullDate + '.pdf'}>\n                            {({ blob, url, loading, error }) => (loading ? 'Loading document...' : `Download PDF`)}\n                        </PDFDownloadLink>\n                        </div> ) : ''}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Team;","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\engagementPDF.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\TableHead.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Timesheet\\TableHead.js",[],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":205,"column":8,"nodeType":"115","endLine":205,"endColumn":10,"suggestions":"116"},{"ruleId":"113","severity":1,"message":"117","line":90,"column":6,"nodeType":"115","endLine":90,"endColumn":8,"suggestions":"118"},{"ruleId":"119","severity":1,"message":"120","line":11,"column":12,"nodeType":"121","messageId":"122","endLine":11,"endColumn":17},{"ruleId":"119","severity":1,"message":"123","line":11,"column":19,"nodeType":"121","messageId":"122","endLine":11,"endColumn":27},{"ruleId":"113","severity":1,"message":"124","line":45,"column":8,"nodeType":"115","endLine":45,"endColumn":10,"suggestions":"125"},{"ruleId":"126","severity":1,"message":"127","line":38,"column":35,"nodeType":"128","messageId":"129","endLine":38,"endColumn":36,"suggestions":"130"},{"ruleId":"126","severity":1,"message":"127","line":38,"column":54,"nodeType":"128","messageId":"129","endLine":38,"endColumn":55,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":119,"column":54,"nodeType":"134","messageId":"135","endLine":119,"endColumn":56},{"ruleId":"132","severity":1,"message":"133","line":169,"column":57,"nodeType":"134","messageId":"135","endLine":169,"endColumn":59},{"ruleId":"126","severity":1,"message":"127","line":196,"column":35,"nodeType":"128","messageId":"129","endLine":196,"endColumn":36,"suggestions":"136"},{"ruleId":"126","severity":1,"message":"127","line":196,"column":54,"nodeType":"128","messageId":"129","endLine":196,"endColumn":55,"suggestions":"137"},{"ruleId":"132","severity":1,"message":"133","line":213,"column":54,"nodeType":"134","messageId":"135","endLine":213,"endColumn":56},{"ruleId":"132","severity":1,"message":"138","line":96,"column":55,"nodeType":"134","messageId":"139","endLine":96,"endColumn":57},{"ruleId":"113","severity":1,"message":"140","line":250,"column":8,"nodeType":"115","endLine":250,"endColumn":10,"suggestions":"141"},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'renderTasks'. Either include it or remove the dependency array.","ArrayExpression",["144"],"React Hook useEffect has missing dependencies: 'decoded.email', 'decoded.teamName', and 'props.userID'. Either include them or remove the dependency array.",["145"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","'setState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'decoded' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["146"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["147","148"],["149","150"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["151","152"],["153","154"],"Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has a missing dependency: 'storeEngagementNames'. Either include it or remove the dependency array.",["155"],"no-global-assign","no-unsafe-negation",{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"messageId":"162","fix":"163","desc":"164"},{"messageId":"165","fix":"166","desc":"167"},{"messageId":"162","fix":"168","desc":"164"},{"messageId":"165","fix":"169","desc":"167"},{"messageId":"162","fix":"170","desc":"164"},{"messageId":"165","fix":"171","desc":"167"},{"messageId":"162","fix":"172","desc":"164"},{"messageId":"165","fix":"173","desc":"167"},{"desc":"174","fix":"175"},"Update the dependencies array to be: [renderTasks]",{"range":"176","text":"177"},"Update the dependencies array to be: [decoded.email, decoded.teamName, props.userID]",{"range":"178","text":"179"},"Update the dependencies array to be: [decoded, props]",{"range":"180","text":"181"},"removeEscape",{"range":"182","text":"183"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"184","text":"185"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"186","text":"183"},{"range":"187","text":"185"},{"range":"188","text":"183"},{"range":"189","text":"185"},{"range":"190","text":"183"},{"range":"191","text":"185"},"Update the dependencies array to be: [storeEngagementNames]",{"range":"192","text":"193"},[7548,7550],"[renderTasks]",[2533,2535],"[decoded.email, decoded.teamName, props.userID]",[1144,1146],"[decoded, props]",[1096,1097],"",[1096,1096],"\\",[1115,1116],[1115,1115],[6176,6177],[6176,6176],[6195,6196],[6195,6195],[7717,7719],"[storeEngagementNames]"]
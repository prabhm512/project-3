[{"C:\\Users\\mehar\\github\\3-project\\client\\src\\index.js":"1","C:\\Users\\mehar\\github\\3-project\\client\\src\\App.js":"2","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Timesheet\\Timesheet.js":"3","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\ReactDND.js":"4","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\initial-data.js":"5","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\column.js":"6","C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\contexts\\UpdateToDoContext.js":"7","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\task.js":"8","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\NewTaskAddBox\\NewTaskAddBox.js":"9","C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\API.js":"10","C:\\Users\\mehar\\github\\3-project\\client\\src\\Auth.js":"11","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Landing\\Landing.js":"12","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Navbar\\Navbar.js":"13","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Login\\login.js":"14","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Register\\register.js":"15","C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\userFunctions.js":"16","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Tasks\\Tasks.js":"17","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Admin\\Admin.js":"18","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\Team.js":"19","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\engagementPDF.js":"20","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\TableHead.js":"21","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Timesheet\\TableHead.js":"22"},{"size":351,"mtime":1613022855922,"results":"23","hashOfConfig":"24"},{"size":5977,"mtime":1615433176582,"results":"25","hashOfConfig":"24"},{"size":13633,"mtime":1615429348770,"results":"26","hashOfConfig":"24"},{"size":16522,"mtime":1613650859709,"results":"27","hashOfConfig":"24"},{"size":833,"mtime":1613650809349,"results":"28","hashOfConfig":"24"},{"size":3325,"mtime":1614239831173,"results":"29","hashOfConfig":"24"},{"size":115,"mtime":1611294788240,"results":"30","hashOfConfig":"24"},{"size":7108,"mtime":1613313871683,"results":"31","hashOfConfig":"24"},{"size":1013,"mtime":1613289174603,"results":"32","hashOfConfig":"24"},{"size":683,"mtime":1612967803732,"results":"33","hashOfConfig":"24"},{"size":454,"mtime":1615376598964,"results":"34","hashOfConfig":"24"},{"size":2139,"mtime":1613641525807,"results":"35","hashOfConfig":"24"},{"size":5233,"mtime":1613536810308,"results":"36","hashOfConfig":"24"},{"size":2974,"mtime":1615433280560,"results":"37","hashOfConfig":"24"},{"size":11103,"mtime":1613314778336,"results":"38","hashOfConfig":"24"},{"size":2665,"mtime":1612918056970,"results":"39","hashOfConfig":"24"},{"size":3912,"mtime":1615344878404,"results":"40","hashOfConfig":"24"},{"size":14631,"mtime":1615427674356,"results":"41","hashOfConfig":"24"},{"size":16170,"mtime":1613640197194,"results":"42","hashOfConfig":"24"},{"size":3881,"mtime":1613370415303,"results":"43","hashOfConfig":"24"},{"size":3367,"mtime":1613190008817,"results":"44","hashOfConfig":"24"},{"size":2493,"mtime":1614143851503,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1qrquh3",{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"C:\\Users\\mehar\\github\\3-project\\client\\src\\index.js",[],["96","97"],"C:\\Users\\mehar\\github\\3-project\\client\\src\\App.js",["98"],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Timesheet\\Timesheet.js",["99"],"/* eslint-disable no-loop-func */\nimport React, { useEffect, useState } from 'react';\nimport API from '../../utils/apis/API';\nimport { useParams, useHistory } from 'react-router-dom';\nimport './Timesheet.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Table, TableBody, TableCell, TableContainer, TablePagination, TableRow, Paper, FormControlLabel, Switch, Box, Button } from '@material-ui/core';\nimport EnhancedTableHead from './TableHead';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n        border: '1px solid #1874cd'\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n    button: {\n        marginBottom: 40,\n        float: 'right'\n    }\n}));\n\nfunction Timesheet() {\n    const history = useHistory();\n\n    // ID of the users unique board is extracted from the location pathname\n    const { id } = useParams();\n\n    // MUI Table data\n    const [rows, setRows] = useState([]);\n\n    // Variables for MUI Table\n    const classes = useStyles();\n    const [order, setOrder] = React.useState('desc');\n    const [orderBy, setOrderBy] = React.useState('cost');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [dense, setDense] = React.useState(false);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n    // Populate MUI Table\n    const renderTasks = () => {\n        const tempRowArr = [];\n\n        API.getUserBoard(id)\n        .then(res => {\n            // Loop through initial data to find out content & time of each task\n            // Add this data to table\n            for (let key in res.data.tasks) {\n\n                if (res.data.tasks.hasOwnProperty(key)) {\n                    if (key === 'task-1') {\n                        continue;\n                    } else {\n                        if (res.data.tasks[key].transferred === false) {\n                            const tempTimesheetArr = [];\n                            for (let timeKey in res.data.tasks[key].timesheet) {\n                                if (res.data.tasks[key].timesheet[timeKey] === 0) {\n                                    tempTimesheetArr.push(\"\");\n                                } else {\n                                    tempTimesheetArr.push(res.data.tasks[key].timesheet[timeKey]);\n                                }\n                            }\n                            tempRowArr.push(createData(res.data.tasks[key].content, ...tempTimesheetArr))\n                        }\n                    }\n                }\n            }\n            if (('transferredTasks') in res.data) {\n                for (let key in res.data.transferredTasks) {\n                    const tempTimesheetArr = [];\n                    for (let timeKey in res.data.transferredTasks[key].timesheet) {\n                        if (res.data.transferredTasks[key].timesheet[timeKey] === 0) {\n                            tempTimesheetArr.push(\"\");\n                        } else {\n                            tempTimesheetArr.push(res.data.transferredTasks[key].timesheet[timeKey]);\n                        }\n                    }\n                    tempRowArr.push(createData(res.data.transferredTasks[key].content, ...tempTimesheetArr));\n                }\n            }\n        })\n        .then(() => {\n            setRows(tempRowArr);\n        })\n    }\n\n    // Functions required for MUI Table\n    function createData(task, mon, tues, wed, thurs, fri, sat, sun) {\n        return { task, mon, tues, wed, thurs, fri, sat, sun };\n    }\n\n    function descendingComparator(a, b, orderBy) {\n        if (b[orderBy] < a[orderBy]) {\n            return -1;\n        }\n        if (b[orderBy] > a[orderBy]) {\n            return 1;\n        }\n        return 0;\n    }\n\n    function getComparator(order, orderBy) {\n        return order === 'desc'\n            ? (a, b) => descendingComparator(a, b, orderBy)\n            : (a, b) => -descendingComparator(a, b, orderBy);\n    }\n\n    function stableSort(array, comparator) {\n        const stabilizedThis = array.map((el, index) => [el, index]);\n        stabilizedThis.sort((a, b) => {\n            const order = comparator(a[0], b[0]);\n            if (order !== 0) return order;\n            return a[1] - b[1];\n        });\n        return stabilizedThis.map((el) => el[0]);\n    }\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n        const newSelecteds = rows.map((n) => n.task);\n        setSelected(newSelecteds);\n        return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, name) => {\n        const selectedIndex = selected.indexOf(name);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n        newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n        newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n        newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n        newSelected = newSelected.concat(\n            selected.slice(0, selectedIndex),\n            selected.slice(selectedIndex + 1),\n        );\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const handleChangeDense = (event) => {\n        setDense(event.target.checked);\n    };\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n    const handleTaskBtnClick = () => {\n        if (localStorage.usertoken) {\n            history.push(\"/tasks\");\n        } else {\n            history.push(\"/demo/tasks\")\n        }\n    } \n\n    useEffect(() => {\n        if (localStorage.usertoken) {\n            renderTasks();\n        } else {\n            if (sessionStorage.traseDemo) {\n                const demo = JSON.parse(sessionStorage.getItem(\"traseDemo\"));\n                const tempRowArr = []\n                // Loop through initial data to find out content & time of each task\n                // Add this data to table\n                for (let key in demo.tasks) {\n                    if (demo.tasks.hasOwnProperty(key)) {\n                        if (key === 'task-1') {\n                            continue;\n                        } else {\n                            if (demo.tasks[key].transferred === false) {\n                                const tempTimesheetArr = [];\n                                for (let timeKey in demo.tasks[key].timesheet) {\n                                    if (demo.tasks[key].timesheet[timeKey] === 0) {\n                                        tempTimesheetArr.push(\"\");\n                                    } else {\n                                        tempTimesheetArr.push(demo.tasks[key].timesheet[timeKey]);\n                                    }\n                                }\n                                tempRowArr.push(createData(demo.tasks[key].content, ...tempTimesheetArr))\n                            }\n                        }\n                    }\n                    if (('transferredTasks') in demo) {\n                        for (let key in demo.transferredTasks) {\n                            const tempTimesheetArr = [];\n                            for (let timeKey in demo.transferredTasks[key].timesheet) {\n                                if (demo.transferredTasks[key].timesheet[timeKey] === 0) {\n                                    tempTimesheetArr.push(\"\");\n                                } else {\n                                    tempTimesheetArr.push(demo.transferredTasks[key].timesheet[timeKey]);\n                                }\n                            }\n                            tempRowArr.push(createData(demo.transferredTasks[key].content, ...tempTimesheetArr));\n                        }\n                    }\n                }\n                setRows(tempRowArr);\n            }\n        } \n    }, []);\n\n    return (\n        <div className=\"timesheet\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-sm-12\">\n                        <h2 className=\"timesheet-heading\">Timesheet</h2>\n                        <br></br>\n                        <Paper className={classes.paper}>\n                            <TableContainer>\n                                <Table\n                                    className={classes.table}\n                                    aria-labelledby=\"tableTitle\"\n                                    size={dense ? 'small' : 'medium'}\n                                    aria-label=\"enhanced table\"\n                                >\n                                    <EnhancedTableHead\n                                        classes={classes}\n                                        numSelected={selected.length}\n                                        onSelectAllClick={handleSelectAllClick}\n                                        rowCount={rows.length}\n                                        order={order}\n                                        orderBy={orderBy}\n                                        onRequestSort={handleRequestSort}\n                                    />\n                                    <TableBody>\n                                    {stableSort(rows, getComparator(order, orderBy))\n                                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                            .map((row, index) => {\n                                        const isItemSelected = isSelected(row.task);\n                                        const labelId = `enhanced-table-checkbox-${index}`;\n\n                                        return (\n                                            <TableRow\n                                            hover\n                                            onClick={(event) => handleClick(event, row.task)}\n                                            role=\"checkbox\"\n                                            aria-checked={isItemSelected}\n                                            tabIndex={-1}\n                                            key={index}\n                                            selected={isItemSelected}\n                                            >\n                                                <TableCell style={{fontWeight: 'bold'}} component=\"td\" id={labelId} scope=\"row\" align=\"left\">\n                                                    <Box pl={3}>\n                                                        {row.task}\n                                                    </Box>\n                                                </TableCell>\n                                                <TableCell align=\"center\">{row.mon}</TableCell>\n                                                <TableCell align=\"center\">{row.tues}</TableCell>\n                                                <TableCell align=\"center\">{row.wed}</TableCell>\n                                                <TableCell align=\"center\">{row.thurs}</TableCell>\n                                                <TableCell align=\"center\">{row.fri}</TableCell>\n                                                <TableCell align=\"center\">{row.sat}</TableCell>\n                                                <TableCell align=\"center\">{row.sun}</TableCell>\n                                            </TableRow>\n                                        );\n                                        })}\n                                    {emptyRows > 0 && (\n                                        <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                                        <TableCell colSpan={6} />\n                                        </TableRow>\n                                    )}\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                            <TablePagination\n                            rowsPerPageOptions={[5, 10, 25]}\n                            component=\"div\"\n                            count={rows.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            onChangePage={handleChangePage}\n                            onChangeRowsPerPage={handleChangeRowsPerPage}\n                            />\n                        </Paper>\n                        <FormControlLabel\n                            control={<Switch checked={dense} onChange={handleChangeDense} />}\n                            label=\"Dense padding\"\n                        />\n                    </div>\n                </div>\n                <Button onClick={handleTaskBtnClick} className={classes.button} variant=\"contained\" color=\"primary\">Tasks</Button>\n            </div>\n        </div>\n    )\n}\n\nexport default Timesheet;","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\ReactDND.js",["100"],"import React, { useEffect, useState } from 'react';\n\n// react-beautiful-dnd\nimport '@atlaskit/css-reset';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\n\n// Utils\nimport UpdateToDoContext from '../../utils/contexts/UpdateToDoContext';\nimport API from '../../utils/apis/API';\nimport { getOneTeam, getTeamMembers, getOneUser } from '../../utils/apis/userFunctions';\nimport jwt_decode from 'jwt-decode';\nimport uniqid from 'uniqid';\n\n// Styling\nimport styled from 'styled-components';\nimport './ReactDND.css';\nimport { decode } from 'jsonwebtoken';\n\nconst Container = styled.div`\n  display:flex;\n`\n\nfunction ReactDND(props) {\n\n  // Used when task is moved in to the 'Puased' & 'Done' columns to record time for current day.\n  // One task may be worked on for multiple days\n  let dayToday = new Date().getDay();\n  let token, decoded;\n\n  if (localStorage.usertoken) {\n      token = localStorage.usertoken;\n      decoded = jwt_decode(token);\n  } else {\n    decoded = {\n      teamName: 'Doe Consulting',\n      email: 'jane@doeconsulting.com',\n      empCost: 100\n    }\n  }\n\n  initialData.teamName = decoded.teamName;\n  const [ DND, setDND ] = useState(initialData);\n\n  // List of all enagagements of the team that the logged in user works for\n  const [engs, setEngs] = useState([]);\n\n  // List of all members in team\n  const [members, setMembers] = useState([]);\n\n  useEffect(() => {\n    if (decoded.email !== 'jane@doeconsulting.com') {\n      if (sessionStorage.traseDemo) {\n        sessionStorage.removeItem(\"traseDemo\");\n      }\n      // Load tasks on component mount\n      loadTasks(props.userID);\n  \n      // Store all engagements of the logged in user's team\n      getOneTeam(decoded.teamName).then(res => {\n        const tempEngArr = [];\n  \n        res.engagements.forEach(el => {\n          tempEngArr.push({ engName: el })\n        })\n        setEngs(tempEngArr);\n      })\n  \n      getTeamMembers(decoded.teamName).then(res => {\n  \n        const tempMembersArr = [];\n  \n        res.forEach(el => {\n          if (el.email !== decoded.email) {\n            tempMembersArr.push(el.email);\n          }\n        })\n        setMembers(tempMembersArr);\n      })\n    } else {\n      if (sessionStorage.traseDemo) {\n        const demoDND = JSON.parse(sessionStorage.getItem(\"traseDemo\"));\n        setDND(demoDND);\n      }\n\n      setEngs([{ engName: 'lorem'}, {engName: 'ipsum'}]);\n      setMembers(['john@doeconsulting.com', 'james@doeconsulting.com']);\n    }\n  }, []);\n  \n  // Updates state to reflect drag & drop result\n  const onDragEnd = result => {\n    const { destination, source, draggableId } = result\n\n    // Exit if task dragged outside of a droppable\n    if (!destination) {\n      return\n    }\n\n    // Check whether location of draggable changed\n    // Users may put draggable back into the same place\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return\n    }\n\n    const start = DND.columns[source.droppableId]\n    const finish = DND.columns[destination.droppableId]\n\n    // Moving tasks to a different position in the same column\n    if (start === finish) {\n      const updatedTaskIds = Array.from(start.taskIds)\n      updatedTaskIds.splice(source.index, 1)\n      updatedTaskIds.splice(destination.index, 0, draggableId)\n\n      const newColumn = {\n        ...start,\n        taskIds: updatedTaskIds\n      }\n\n      const newState = {\n        ...DND,\n        columns: {\n          ...DND.columns,\n          [newColumn.id]: newColumn\n        }\n      }\n\n      // Do not set state inside method that does an axios call as task movement lags.\n      setDND(newState);\n      if (decoded.email !== 'jane@doeconsulting.com') {\n        API.updateUserBoard(newState);\n      } else {\n        sessionStorage.setItem(\"traseDemo\", JSON.stringify(newState));\n      }\n      return\n    }\n\n    // Moving tasks from 1 column to another\n    // Do not allow task to move back to 'To Do' column once it has been moved out\n    if ((start.id !== 'column-2' || start.id !== 'column-3' || start.id !== 'column-4') && finish.id !== 'column-1') {\n      const startTaskIds = Array.from(start.taskIds)\n        startTaskIds.splice(source.index, 1)\n        const newStart = {\n          ...start,\n          taskIds: startTaskIds\n      }\n  \n      const finishTaskIds = Array.from(finish.taskIds)\n        finishTaskIds.splice(destination.index, 0, draggableId)\n        const newFinish = {\n          ...finish,\n          taskIds: finishTaskIds\n      }\n    \n      let newState = {\n        ...DND,\n        columns: {\n          ...DND.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish\n        }\n      }\n\n      // Record the date task was moved into 'In Progress' column\n      if (finish.id === 'column-2') {\n\n        newState = {\n          ...DND, \n          tasks: { \n            ...DND.tasks,\n            [draggableId]: { ...DND.tasks[draggableId], inProgressDate: Date.now() }\n          },\n          columns: {\n            ...DND.columns,\n            [newStart.id]: newStart,\n            [newFinish.id]: newFinish\n          }\n        }\n      } \n\n      // Record the date task was moved FROM 'In Progress' column into 'Paused' column \n      else if (finish.id === 'column-3' && start.id === 'column-2')  {\n\n        let taskTime;\n        let totalTaskTime = 0;\n\n        // Calculate exact time (in miilliseconds) that task was in 'In Progress' column\n        if (DND.tasks[draggableId].inProgressDate !== 0) {\n          taskTime = Date.now() - DND.tasks[draggableId].inProgressDate;\n        }\n\n        const timeInSeconds = Math.round(taskTime / 1000);\n        const timeInHours = (timeInSeconds / 3600).toFixed(3);\n        const parsedTimeInHours = parseFloat(timeInHours);\n      \n        // Calculate total time it took to complete task\n        for (let i=1; i<6; i++) {\n          totalTaskTime += DND.tasks[draggableId].timesheet[i];\n        }\n        totalTaskTime+=parsedTimeInHours;\n\n        // Calculate cost of task\n        const cost = calculateCost(decoded.empCost, totalTaskTime);\n\n        newState = {\n          ...DND, \n          tasks: { \n            ...DND.tasks,\n            [draggableId]: { ...DND.tasks[draggableId], pausedDate: Date.now(), timesheet: { ...DND.tasks[draggableId].timesheet, [`${dayToday}`]: DND.tasks[draggableId].timesheet[dayToday] + parsedTimeInHours }, employees: { ...DND.tasks[draggableId].employees, [decoded.email]: { email: decoded.email, overallTime: totalTaskTime, cost: cost }} }\n          },\n          columns: {\n            ...DND.columns,\n            [newStart.id]: newStart,\n            [newFinish.id]: newFinish\n          }\n        }\n\n      }\n\n      // Record the date task was moved FROM 'In Progress' column into 'Done' column \n      else if (finish.id === 'column-4'  && start.id === 'column-2') {\n\n        let taskTime;\n        let totalTaskTime=0;\n\n        // Calculate exact time (in miilliseconds) that task was in 'In Progress' column\n        if (DND.tasks[draggableId].inProgressDate !== 0) {\n          taskTime = Date.now() - DND.tasks[draggableId].inProgressDate;\n        }\n\n        const timeInSeconds = Math.round(taskTime / 1000);\n        const timeInHours = (timeInSeconds / 3600).toFixed(3);\n        const parsedTimeInHours = parseFloat(timeInHours);\n\n        // Calculate total time it took to complete task\n        for (let i=1; i<6; i++) {\n          totalTaskTime += DND.tasks[draggableId].timesheet[i];\n        }\n        totalTaskTime+=parsedTimeInHours;\n\n         // Calculate cost of task\n        const cost = calculateCost(decoded.empCost, totalTaskTime); \n\n        newState = {\n          ...DND, \n          tasks: { \n            ...DND.tasks,\n            [draggableId]: { ...DND.tasks[draggableId], doneDate: Date.now(), timesheet: { ...DND.tasks[draggableId].timesheet, [`${dayToday}`]: DND.tasks[draggableId].timesheet[dayToday] + parsedTimeInHours }, employees: { ...DND.tasks[draggableId].employees, [decoded.email]: { email: decoded.email, overallTime: totalTaskTime, cost: cost }} }\n          },\n          columns: {\n            ...DND.columns,\n            [newStart.id]: newStart,\n            [newFinish.id]: newFinish\n          }\n        }\n\n      }\n      // console.log(newState);\n      // Do not set state inside method that does an axios call as task movement lags.\n      setDND(newState);\n      if (decoded.email !== 'jane@doeconsulting.com') {\n        API.updateUserBoard(newState);\n      } else {\n        sessionStorage.setItem(\"traseDemo\", JSON.stringify(newState));\n      }\n    }\n  } \n\n  // Add new task to To do list \n  const addNewTask = () => {\n    let newTaskID = uniqid();\n\n    if (document.querySelector('.inputNewTaskContent').value !== \"\") {\n\n      // Add new task\n      // New timer instantiated on creation of new task\n      DND.tasks[newTaskID] = { id: newTaskID, content: document.querySelector('.inputNewTaskContent').value, inProgressDate: 0, pausedDate: 0, doneDate: 0, timesheet: {'1': 0, '2': 0, '3': 0, '4': 0, '5': 0,'6': 0, '7': 0}, engagement: '', employees: {}, transferred: false };\n\n      // ID of new task gets inserted into first column\n      const newToDos = {\n        _id: props.userID,\n        tasks: { ...DND.tasks },\n        columns: {\n          'column-1': {\n            id: 'column-1',\n            title: 'To Do',\n            taskIds: [newTaskID, ...DND.columns['column-1'].taskIds]\n          },\n          'column-2': {\n            id: DND.columns['column-2'].id,\n            title: DND.columns['column-2'].title,\n            taskIds: [...DND.columns['column-2'].taskIds]\n          },\n          'column-3': {\n            id: DND.columns['column-3'].id,\n            title: DND.columns['column-3'].title,\n            taskIds: [...DND.columns['column-3'].taskIds]\n          },\n          'column-4': {\n            id: DND.columns['column-4'].id,\n            title: DND.columns['column-4'].title,\n            taskIds: [...DND.columns['column-4'].taskIds]\n          },            \n        },\n        columnOrder: [...DND.columnOrder],\n        teamName: decoded.teamName,\n        transferredTasks: { ...DND.transferredTasks },\n        empCost: decoded.empCost\n      }\n      // Do not set state inside method that does an axios call as task movement lags.\n      setDND(newToDos);\n      if (decoded.email !== 'jane@doeconsulting.com') {\n        API.updateUserBoard(newToDos);\n      } else {\n        sessionStorage.setItem(\"traseDemo\", JSON.stringify(newToDos));\n      }\n\n      // console.log(newToDos);\n      document.querySelector('.inputNewTaskContent').value = \"\";\n    }\n  }\n\n  const calculateCost = (empCost, taskTime) => {\n\n    let cost = 0; \n\n    cost = Math.round((empCost * taskTime) * (10^2)) / (10^2);\n    \n    return cost;\n  }\n\n  // Called from component inside task.js (2 levels down). Allows task content to be edited\n  const editTaskContent = (taskID, content) => {\n    const newState = {\n      ...DND, \n      tasks: {\n        ...DND.tasks,\n        [taskID]: { ...DND.tasks[taskID], content: content }\n      }\n    }\n\n    setDND(newState);\n    if (decode.email !== 'jane@doeconsulting.com') {\n      API.updateUserBoard(newState);\n    } else {\n      sessionStorage.setItem(\"traseDemo\", JSON.stringify(newState));\n    }\n  }\n\n  // Called from component inside task.js (2 levels down). Allows task to be deleted\n  // Second parameted optional because it is only needed when task is being transferred\n  const deleteTask = (taskID, newStateForLoggedInUser = 0) => {\n    let newState = {};\n    // console.log(taskID);\n    delete DND.tasks[taskID];\n\n    // Delete task from columns object as well\n    for (let key in DND.columns) {\n      DND.columns[key].taskIds.forEach((el, idx) => {\n        if (el === taskID) {\n          DND.columns[key].taskIds.splice(idx, 1);\n        }\n      })\n    }\n\n    if (newStateForLoggedInUser === 0) {\n      newState = {\n        ...DND\n      };\n    } \n    else {\n      newState = {\n        ...newStateForLoggedInUser\n      }\n    }\n\n    setDND(newState);\n    if (decoded.email !== 'jane@doeconsulting.com') {\n      API.updateUserBoard(newState);\n    } else {\n      sessionStorage.setItem(\"traseDemo\", JSON.stringify(newState));\n    }\n  }\n\n  // Get all tasks of the logged in user\n  const loadTasks = (userID) => {\n    // console.log(userID);\n    API.getUserBoard(userID)\n    .then(res => {\n      // console.log(res);\n      setDND(res.data)\n    })\n    .catch(err => console.log(err));\n  }\n\n  const handleAssign = (taskID, radioValue) => {\n    const newState = {\n      ...DND, \n      tasks: {\n        ...DND.tasks,\n        [taskID]: { ...DND.tasks[taskID], engagement: radioValue }\n      }\n    }\n\n    setDND(newState);\n    if (decoded.email !== 'jane@doeconsulting.com') {\n      API.updateUserBoard(newState);\n    } else {\n      sessionStorage.setItem(\"traseDemo\", JSON.stringify(newState));\n    }\n  }\n\n  const handleTransfer = (taskID, transferEmail) => {\n    if (decoded.email !== 'jane@doeconsulting.com') {\n      getOneUser({email: transferEmail}).then(response => {\n        API.getUserBoard(response[0]._id).then(res => {\n  \n          // Disable drag for task that is being transferred on logged in users board\n          const newStateForLoggedInUser = {\n            ...DND,\n            transferredTasks: {\n              ...DND.transferredTasks,\n              [taskID]: { id: taskID, content: DND.tasks[taskID].content, transferredToId: res.data._id, transferredToEmail: transferEmail, timesheet: {...DND.tasks[taskID].timesheet} }\n            }\n          }\n  \n          const newStateForTransferUser = {\n            ...res.data,\n            _id: res.data._id, \n            tasks: { [taskID]: {\n              id: taskID, \n              content: DND.tasks[taskID].content, \n              inProgressDate: 0, \n              pausedDate: 0, \n              doneDate: 0, \n              timesheet: {'1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0}, \n              engagement: DND.tasks[taskID].engagement, \n              employees: { ...DND.tasks[taskID].employees },\n              transferred: false,\n            }, ...res.data.tasks },\n            columns: {\n              'column-1': {\n                id: 'column-1',\n                title: 'To Do',\n                taskIds: [taskID, ...res.data.columns['column-1'].taskIds]\n              },\n              'column-2': {\n                id: res.data.columns['column-2'].id,\n                title: res.data.columns['column-2'].title,\n                taskIds: [...res.data.columns['column-2'].taskIds]\n              },\n              'column-3': {\n                id: res.data.columns['column-3'].id,\n                title: res.data.columns['column-3'].title,\n                taskIds: [...res.data.columns['column-3'].taskIds]\n              },\n              'column-4': {\n                id: res.data.columns['column-4'].id,\n                title: res.data.columns['column-4'].title,\n                taskIds: [...res.data.columns['column-4'].taskIds]\n              }\n            }\n          }\n  \n          // Delete task from logged in users board\n          // This also updates the transferred object of the logged in users board\n          deleteTask(taskID, newStateForLoggedInUser);\n  \n          // Update board of user who the task is beign transferred to\n          API.updateUserBoard(newStateForTransferUser);\n  \n        })\n      })\n    } else {\n        const newStateForLoggedInUser = {\n          ...DND,\n          transferredTasks: {\n            ...DND.transferredTasks,\n            [taskID]: { id: taskID, content: DND.tasks[taskID].content, transferredToEmail: transferEmail, timesheet: {...DND.tasks[taskID].timesheet} }\n          }\n        }\n        deleteTask(taskID, newStateForLoggedInUser);\n    }\n  }\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Container>\n          {DND.columnOrder.map(columnId => {\n            const column = DND.columns[columnId]\n            const tasks = column.taskIds.map(\n                taskId => DND.tasks[taskId]\n          )\n\n          return (\n            <UpdateToDoContext.Provider value={addNewTask} key={column.id}>\n              <Column column={column} tasks={tasks} userID={props.userID} currState={DND} editTaskContentCB={editTaskContent} deleteTaskCB={deleteTask} handleAssignCB={handleAssign} engagements={engs} members={members} handleTransferCB={handleTransfer}/>\n            </UpdateToDoContext.Provider>\n          )\n        })}\n      </Container>\n    </DragDropContext>\n  )\n}\n\nexport default ReactDND;\n","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\initial-data.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\column.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\contexts\\UpdateToDoContext.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\task.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\NewTaskAddBox\\NewTaskAddBox.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\API.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\Auth.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Landing\\Landing.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Navbar\\Navbar.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Login\\login.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Register\\register.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\userFunctions.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Tasks\\Tasks.js",["101"],"import React, { useEffect } from 'react';\nimport jwt_decode from 'jwt-decode';\nimport ReactDND from '../../components/ReactDND/ReactDND';\nimport { updateLoginStatus } from '../../utils/apis/userFunctions';\nimport './Tasks.css';\nimport { Button } from \"@material-ui/core\";\nimport { useHistory } from 'react-router-dom';\n\nfunction Tasks(props) {\n\n    // const [state, setState] = useState({\n    //     teamName: '',\n    //     first_name: '',\n    //     last_name: '',\n    //     email: '',\n    //     password: '',\n    //     admin: '',\n    //     errors: {}\n    // })\n\n    const history = useHistory();\n    let token = null; \n    let decoded = null;\n\n    if (localStorage.usertoken) {\n        token = localStorage.usertoken;\n        decoded = jwt_decode(token);\n    }\n\n    const handleClick = () => {\n        if (decoded !== null) {\n            history.push('/timesheet/' + decoded._id);\n        } else {\n            history.push('/demo/timesheet')\n        }\n    };\n\n    const handleEngClick = () => {\n        history.push('/demo/engagements');\n    }\n    \n    useEffect(() => {\n        if (decoded !== null && decoded.firstLogin === true) {\n    \n            props.handleShowCB();\n    \n            updateLoginStatus(decoded._id);\n        }\n    }, []) \n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-sm-12\">\n                    {decoded === null ? (\n                        <div>\n                            <h1 className=\"loggedInUserName\">Jane Doe</h1>\n                            <br></br>\n                            <ReactDND userID={null} />\n                            <Button onClick={handleEngClick} className=\"engButton\" style={{marginBottom: 40, marginLeft: 10}} variant=\"contained\" color=\"primary\">Engagements</Button>\n                            <Button onClick={handleClick} className=\"timesheetButton\" style={{marginBottom: 40}} variant=\"contained\" color=\"primary\">Timesheet</Button>\n                            <div>\n                                <h4 className=\"instructions\"><i>Instructions</i></h4>\n                                <h5>Time a Task</h5>\n                                <ol>\n                                    <li>Add a task by clicking on the + icon in the 'To Do' column</li>\n                                    <li>Drag the task into the 'In Progress' column to start time monitoring</li>\n                                    <li>Drag this task into the 'Paused' or 'Done' columns to stop time monitoring</li>\n                                    <li>Click on the 'Timesheet' button</li>\n                                </ol>\n                                <h5>Assign Task to an Engagement</h5>\n                                <ol>\n                                    <li>Click on the coral button that is shown on the top right of each task</li>\n                                    <li>Click the 'Assign' option, select an engagement, then click 'Assign'</li>\n                                    <li><b>Task must be timed for its cost to be shown on the engagements page</b></li>\n                                    <li>Click on the 'Engagements' button</li>\n                                </ol>\n                            </div>\n                        </div>\n                    ): (\n                        <div>\n                            <h1 className=\"loggedInUserName\">\n                                { decoded.first_name } { decoded.last_name }\n                            </h1>\n                            <br></br>\n                            <ReactDND userID={ decoded._id } />\n                            <Button onClick={handleClick} className=\"timesheetButton\" style={{marginBottom: 40}} variant=\"contained\" color=\"primary\">Timesheet</Button>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    ) \n}\n\nexport default Tasks;","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Admin\\Admin.js",["102","103","104","105","106","107","108"],"import React, { Component } from 'react';\nimport jwt_decode from 'jwt-decode';\nimport API from '../../utils/apis/API';\nimport { registerUser, getUsers, getOneUser, registerEng, getOneTeam, removeUser } from '../../utils/apis/userFunctions';\nimport initialData from '../../components/ReactDND/initial-data';\nimport './Admin.css';\nimport { Modal } from 'react-bootstrap';\n\nclass Admin extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            teamName: '',\n            first_name: '',\n            last_name: '',\n            email: '',\n            password: '',\n            admin: false,\n            firstLogin: '',\n            engagement: '',\n            removeEmail: '',\n            empCost: 0,\n            removeAlertShow: false,\n            addAlertShow: false,\n            errors: {}\n        }\n    }\n    token = localStorage.usertoken;\n    decoded = jwt_decode(this.token);\n\n    handleValidation = () => {\n        let errors = {};\n        let formIsValid = true;\n\n        // email\n        const inputEmail = this.state.email;\n        const emailRegex = /^\\w+([\\.-]?\\w+)*@[a-z]+([\\.-]?[a-z]+)*(\\.[a-z]{2,4})+$/;\n        const emailResult = emailRegex.test(inputEmail);\n        if (!this.state.email.trim()) {\n            formIsValid = false;\n            errors[\"email\"] = \"Cannot be empty\";\n        }\n        else if (!emailResult) {\n            formIsValid = false;\n            errors[\"email\"] = \"Email is not valid\";\n        }\n        else {}\n\n\n        // firstName\n        if (!this.state.first_name.trim()) {\n            formIsValid = false;\n            errors[\"first_name\"] = \"Cannot be empty\";\n        }\n        else if (typeof this.state.first_name !== \"undefined\") {\n            if (!this.state.first_name.match(/^[a-zA-Z]+$/)) {\n                formIsValid = false;\n                errors[\"first_name\"] = \"Only letters\";\n            }\n        }\n        else {}\n\n        // lastName\n        if (!this.state.last_name.trim()) {\n            formIsValid = false;\n            errors[\"last_name\"] = \"Cannot be empty\";\n        }\n        else if (!this.state.last_name.match(/^[a-zA-Z]+$/)) {\n            formIsValid = false;\n            errors[\"last_name\"] = \"Only letters\";\n        }\n        else {}\n\n        // empCost\n        if (this.state.empCost === 0) {\n            formIsValid = false;\n            errors[\"empCost\"] = \"Cannot be equal to 0\";\n        }\n\n        this.setState({ errors: errors });\n        return formIsValid;\n    }\n\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    onAdminChange = event => {\n\n        if (event.target.value === \"Yes\") {\n            this.setState({ admin: true })\n        } else {\n            this.setState({ admin: false })\n        }\n    }\n\n    // Add new team member to db\n    onTeamMemberSubmit = (event) => {\n        let errors= {};\n\n        event.preventDefault();\n\n        const userData = {\n            teamName: this.decoded.teamName.trim(),\n            first_name: this.state.first_name.trim(),\n            last_name: this.state.last_name.trim(),\n            email: this.state.email.trim().toLowerCase(),\n            password: 'init01',\n            empCost: this.state.empCost,\n            admin: this.state.admin,\n            firstLogin: true\n        };\n\n        const validationResult = this.handleValidation();\n\n        if (validationResult) {\n            getUsers().then(async data => {\n                const destination = data.map(element => {\n                    if (element.email === this.state.email.trim().toLowerCase()) {\n                        console.log('foundmatch');\n                        return true;\n                    }\n                }).filter(item => { return item; })[0];\n                // Check if email exists in db or not\n                if (!destination) {\n                    registerUser(userData).then(() => {\n                        getOneUser(userData).then(async res => {\n                            // console.log(res);\n                            initialData._id = res[0]._id;\n                            initialData.teamName = res[0].teamName;\n                            initialData.empCost = res[0].empCost;\n                            await API.createBoard(initialData).catch(err => console.log(err));\n                        })\n                    })\n                    .then(() => {\n                        // To clear form input fields on successful user registration\n                        this.setState({ \n                            first_name: \"\",\n                            last_name: \"\",\n                            email: \"\",\n                            empCost: 0,\n                            addAlertShow: true\n                        })\n                    })\n                    .catch(err => console.log(err))\n                }\n                else {\n                    errors[\"email\"] = \"Email already exists\";\n                    this.setState({ errors: errors });\n                }\n            })\n        }\n    }\n\n    // Add new engagement to db\n    onEngagementsSubmit = event => {\n        let errors = {};\n\n        event.preventDefault();\n\n        const engData = {\n            engName: this.state.engagement.toLowerCase(),\n            teamName: this.decoded.teamName\n        }\n\n        getOneTeam(engData.teamName).then(async data => {\n\n            const destination = data.engagements.map(el => {\n                if (el === this.state.engagement.toLowerCase()) {\n                    errors['engagement'] = \"Your team is already using this name\";\n                    this.setState({ errors: errors });\n                    return true;\n                } \n            }).filter(item => { return item; })[0];\n\n            if (!destination) {\n                registerEng(engData);\n\n                this.setState({ \n                    engagement: \"\",\n                    errors: \"\"\n                })\n            }\n        })\n    }\n\n    onTeamMemberRemove = event => {\n        let errors = {};\n        let formIsValid = true;\n\n        event.preventDefault();\n\n        // Validate email\n        const inputEmail = this.state.removeEmail;\n        const emailRegex = /^\\w+([\\.-]?\\w+)*@[a-z]+([\\.-]?[a-z]+)*(\\.[a-z]{2,4})+$/;\n        const emailResult = emailRegex.test(inputEmail);\n\n        if (!this.state.removeEmail.trim()) {\n            formIsValid = false;\n            errors[\"removeEmail\"] = \"Cannot be empty\";\n        }\n        else if (!emailResult) {\n            formIsValid = false;\n            errors[\"removeEmail\"] = \"Email is not valid\";\n        }\n        else {}\n\n        this.setState({ errors: errors });\n\n        if (formIsValid) {\n            getUsers().then(async data => {\n                const destination = data.map(element => {\n                    if (element.email === this.state.removeEmail.trim().toLowerCase()) {\n                        return true;\n                    }\n                }).filter(item => { return item; })[0];\n                // Check if email exists in db or not\n                if (!destination) {\n                    errors[\"removeEmail\"] = \"No team member is registered with this email\";\n                    this.setState({ errors: errors });\n                }\n                else {\n                    getOneUser({ email: this.state.removeEmail }).then(res => {\n                        API.deleteBoard(res[0]._id);\n                    })\n                    removeUser(this.state.removeEmail);\n                    this.setState({ \n                        removeAlertShow: true,\n                        removeEmail: \"\"\n                    });\n                }\n            })  \n        }\n    }\n\n    render() {\n        return (\n            <div className=\"container adminForms\">\n                <div className=\"row\">\n                    <div className=\"col-sm-12\">\n                        <h1 className=\"heading\">Admin</h1>\n                    </div>\n                </div>\n                <br></br>\n                <div className=\"row\">\n                    <div className=\"col-sm-8\">\n                        <form onSubmit={this.onTeamMemberSubmit}>\n                            <h3>Add Team Members</h3>\n                            <div className='form-group'>\n                                <label htmlFor='first_name'>First Name</label>\n                                <input type='text'\n                                    refs='first_name'\n                                    className='form-control'\n                                    name='first_name'\n                                    placeholder='Enter First Name'\n                                    value={this.state.first_name}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"first_name\"]}</span>\n                            </div>\n                            <div className='form-group'>\n                                <label htmlFor='last_name'>Last Name</label>\n                                <input type='text'\n                                    refs='last_name'\n                                    className='form-control'\n                                    name='last_name'\n                                    placeholder='Enter Last Name'\n                                    value={this.state.last_name}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"last_name\"]}</span>\n                            </div>\n                            <div className='form-group'>\n                                <label htmlFor='email'>Email Address</label>\n                                <input type='email'\n                                    refs='email'\n                                    className='form-control'\n                                    name='email'\n                                    placeholder='Enter Email'\n                                    value={this.state.email}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"email\"]}</span>\n                            </div>\n                            <div className='form-group'>\n                                <label htmlFor='empCost'>Cost per hour</label>\n                                <input type='number'\n                                    refs='empCost'\n                                    className='form-control'\n                                    name='empCost'\n                                    placeholder='Enter Employee Cost (per hour)'\n                                    value={this.state.empCost}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"empCost\"]}</span>\n                            </div>\n                            <div className='form-group'>\n                                <label>Admin</label>&nbsp;\n                                <select name=\"admin\" onChange={this.onAdminChange}>\n                                    <option>No</option>\n                                    <option>Yes</option>\n                                </select>\n                            </div>\n                            <button type='submit' className='btn btn-lg btn-primary btn-block'>Add</button>\n                        </form>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <form onSubmit={this.onTeamMemberRemove}>\n                            <h3>Remove Team Members</h3>\n                            <div className='form-group'>\n                                <label htmlFor='removeEmail'>Email Address</label>\n                                <input type='email'\n                                    refs='removeEmail'\n                                    className='form-control'\n                                    name='removeEmail'\n                                    placeholder='Enter Email'\n                                    value={this.state.removeEmail}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"removeEmail\"]}</span>\n                            </div>\n                            <button type='submit' className='btn btn-lg btn-danger btn-block'>Remove</button>\n                        </form>\n                    </div>\n                </div>\n                <br></br> \n                <div className=\"row\">\n                    <div className=\"col-sm-8\">\n                        <h3>Add New Engagement</h3>\n                        <form onSubmit={this.onEngagementsSubmit}>\n                            <div className='form-group'>\n                                <label htmlFor='engagement'>Engagement Name</label>\n                                <input type='text'\n                                    refs='engagement'\n                                    className='form-control'\n                                    name='engagement'\n                                    placeholder='Enter Engagement Name'\n                                    value={this.state.engagement}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"engagement\"]}</span>\n                            </div>\n                            <button type='submit' className='btn btn-lg btn-primary btn-block addEngButton'>Add</button>\n                        </form>\n                    </div>\n                </div> \n                <Modal                 \n                    show={this.state.addAlertShow}\n                    onHide={() => this.setState({ addAlertShow: false })}\n                    keyboard={false}>\n                    <Modal.Header className=\"addMemberAlert\" closeButton><b>Team Member successfully added!</b></Modal.Header>\n                </Modal>   \n                <Modal                 \n                    show={this.state.removeAlertShow}\n                    onHide={() => this.setState({ removeAlertShow: false })}\n                    keyboard={false}>\n                    <Modal.Header className=\"removeMemberAlert\" closeButton><b>Team Member successfully removed!</b></Modal.Header>\n                </Modal>         \n            </div>\n        )\n    }\n}\n\nexport default Admin;","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\Team.js",["109","110","111"],"import React, { useEffect, useState } from 'react';\nimport jwt_decode from 'jwt-decode';\nimport { getOneTeam } from '../../utils/apis/userFunctions';\nimport API from '../../utils/apis/API';\nimport './Team.css';\n// import EngAccordion from './Accordion';\nimport MyDocument from './engagementPDF';\nimport {PDFDownloadLink } from '@react-pdf/renderer';\nimport startOfWeek from 'date-fns/startOfWeek';\nimport endOfWeek from 'date-fns/endOfWeek';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Table, TableBody, TableCell, TableContainer, TablePagination, TableRow, Paper, FormControlLabel, Switch, Box, Menu, MenuItem, Button } from '@material-ui/core';\nimport EnhancedTableHead from './TableHead';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n        border: '1px solid #ff7256'\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nfunction Team() {\n\n    let token = null;\n    let decoded = null;\n\n    if (localStorage.usertoken) {\n        token = localStorage.usertoken;\n        decoded = jwt_decode(token);\n    }\n\n    const history = useHistory();\n\n    const [engs, setEngs] = useState([]);\n\n    const dateToday = new Date();\n    const month = dateToday.getMonth() + 1;\n    const fullDate = dateToday.getDate() + '/' + month + '/' + dateToday.getFullYear();\n\n    let tempEngArr = [];\n    \n    // MUI Table data\n    const [rows, setRows] = useState([]);\n\n    // Variables for MUI Table\n    const classes = useStyles();\n    const [order, setOrder] = React.useState('desc');\n    const [orderBy, setOrderBy] = React.useState('cost');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [dense, setDense] = React.useState(false);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    // Show different report based on which button is clicked\n    const [showReport, setShowReport] = useState({\n        name: '',\n        tasks: {},\n        weekStart: '', \n        weekEnd: '',\n        view: false\n    });\n    \n\n    const storeEngagementNames = () => {\n\n        // Store content of each task with the same engagement name\n        getOneTeam(decoded.teamName).then(res => {\n\n            res.engagements.forEach(eng => {\n                tempEngArr.push({ engName: eng, tasks: [] });\n            })\n        }).then(() => {\n            renderEngagements();\n        }).then(() => {\n            setEngs(tempEngArr);\n        })\n    }\n    \n    const renderEngagements = () => {\n        API.getBoards().then(response => {    \n            response.data.forEach(el => {\n                if (el.teamName === decoded.teamName) {\n                    for (let key in el.tasks) {\n                        if (el.tasks[key].engagement !== \"\") {\n                            tempEngArr.map((eng, idx) => {\n                                if (eng.engName === el.tasks[key].engagement) {\n                                    tempEngArr[idx].tasks.push({employees: { ...el.tasks[key].employees }, content: el.tasks[key].content })\n                                }\n                            })\n                        }\n                    }\n                }\n            })\n        })  \n    }\n\n    // Required for PDF print & table data render\n    const renderClickedEngReport = event => {\n        event.preventDefault();\n        \n        // PDF Print\n        let tasks = {};\n        \n        const weekStart = startOfWeek(new Date(), {weekStartsOn: 1}).getDate()+ '/' + month + '/' + dateToday.getFullYear();\n        const weekEnd = endOfWeek(new Date(), {weekStartsOn: 1}).getDate() - 2 + '/' + month + '/' + dateToday.getFullYear();\n\n        engs.forEach(el => {\n            if (el.engName === event.target.id) {\n                tasks = {...el.tasks};\n            }\n        })\n        setShowReport({\n            name: event.target.id,\n            tasks: tasks,\n            weekStart: weekStart, \n            weekEnd: weekEnd,\n            view: true\n        })\n\n        // Table data render\n\n        const tempRowArr = [];\n        engs.forEach((el, idx) => {\n            if (el.engName === event.target.id) {\n                el.tasks.forEach(task => {\n                    let taskCost = 0.00;\n                    let taskTime = 0.00;\n                    for (let empsKey in task.employees) {\n                        taskCost += parseFloat(task.employees[empsKey].cost);\n                        taskTime += parseFloat(task.employees[empsKey].overallTime);\n                    }\n                    tempRowArr.push(createData(task.content, taskTime, taskCost));\n                })\n            }\n        })\n        setRows(tempRowArr);\n    }\n\n    // Functions required for MUI Table\n    function createData(task, hours, cost) {\n        return { task, hours, cost };\n    }\n\n    function descendingComparator(a, b, orderBy) {\n        if (b[orderBy] < a[orderBy]) {\n            return -1;\n        }\n        if (b[orderBy] > a[orderBy]) {\n            return 1;\n        }\n        return 0;\n    }\n\n    function getComparator(order, orderBy) {\n        return order === 'desc'\n            ? (a, b) => descendingComparator(a, b, orderBy)\n            : (a, b) => -descendingComparator(a, b, orderBy);\n    }\n\n    function stableSort(array, comparator) {\n        const stabilizedThis = array.map((el, index) => [el, index]);\n        stabilizedThis.sort((a, b) => {\n            const order = comparator(a[0], b[0]);\n            if (order !== 0) return order;\n            return a[1] - b[1];\n        });\n        return stabilizedThis.map((el) => el[0]);\n    }\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n        const newSelecteds = rows.map((n) => n.task);\n        setSelected(newSelecteds);\n        return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, name) => {\n        const selectedIndex = selected.indexOf(name);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n        newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n        newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n        newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n        newSelected = newSelected.concat(\n            selected.slice(0, selectedIndex),\n            selected.slice(selectedIndex + 1),\n        );\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const handleChangeDense = (event) => {\n        setDense(event.target.checked);\n    };\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n    // Required for Engagements Menu\n    const ITEM_HEIGHT = 48;\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const open = Boolean(anchorEl);\n\n    const handleMenuClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n    };\n\n    useEffect(() => {\n        if (decoded === null) {  \n            if (sessionStorage.traseDemo) {\n                const demo = JSON.parse(sessionStorage.getItem(\"traseDemo\"));;\n                tempEngArr.push({ engName: 'lorem', tasks: [] }, { engName: 'ipsum', tasks: [] });\n\n                for (let key in demo.tasks) {\n                    if (demo.tasks[key].engagement !== \"\") {\n                        tempEngArr.map((eng, idx) => {\n                            if (eng.engName === demo.tasks[key].engagement) {\n                                tempEngArr[idx].tasks.push({employees: { ...demo.tasks[key].employees }, content: demo.tasks[key].content })\n                            }\n                        })\n                    }\n                }\n                console.log(tempEngArr);\n                setEngs(tempEngArr);\n            }\n        } else {\n            storeEngagementNames();\n        }\n    }, [])\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-sm-12\">\n                    <h1 className=\"teamNameEngPage\">{decoded === null ? 'Doe Consulting' : decoded.teamName}</h1>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-sm-12\">\n                    {/* <h3>Engagements</h3> */}\n                    <Button aria-label=\"more\" aria-controls=\"long-menu\" aria-haspopup=\"true\" onClick={handleMenuClick} variant=\"contained\" color=\"primary\">\n                        View Engagements\n                    </Button>\n                    <Menu\n                        id=\"long-menu\"\n                        anchorEl={anchorEl}\n                        keepMounted\n                        open={open}\n                        onClose={handleMenuClose}\n                        PaperProps={{\n                        style: {\n                            maxHeight: ITEM_HEIGHT * 4.5,\n                            width: '30ch',\n                        },\n                        }}\n                    >\n                        {engs.map((el, idx) => (\n                        <MenuItem key={el.engName} id={el.engName} onClick={renderClickedEngReport}>\n                            {el.engName}\n                        </MenuItem>\n                        ))}\n                    </Menu>\n                </div>\n            </div>\n            <hr></hr>\n            <div className=\"row\">\n                <div className=\"col-sm-12\">\n                    {showReport.view ? ( <div>\n                        <h2 className=\"engName\">{showReport.name.toUpperCase()} Report</h2>\n                        <br></br>\n                        <div className={classes.root}>\n                            <Paper className={classes.paper}>\n                                <TableContainer>\n                                    <Table\n                                        className={classes.table}\n                                        aria-labelledby=\"tableTitle\"\n                                        size={dense ? 'small' : 'medium'}\n                                        aria-label=\"enhanced table\"\n                                    >\n                                        <EnhancedTableHead\n                                            classes={classes}\n                                            numSelected={selected.length}\n                                            order={order}\n                                            orderBy={orderBy}\n                                            onSelectAllClick={handleSelectAllClick}\n                                            onRequestSort={handleRequestSort}\n                                            rowCount={rows.length}\n                                        />\n                                        <TableBody>\n                                        {stableSort(rows, getComparator(order, orderBy))\n                                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                            .map((row, index) => {\n                                            const isItemSelected = isSelected(row.task);\n                                            const labelId = `enhanced-table-checkbox-${index}`;\n\n                                            return (\n                                                <TableRow\n                                                hover\n                                                onClick={(event) => handleClick(event, row.task)}\n                                                role=\"checkbox\"\n                                                aria-checked={isItemSelected}\n                                                tabIndex={-1}\n                                                key={index}\n                                                selected={isItemSelected}\n                                                >\n                                                    <TableCell component=\"td\" id={labelId} scope=\"row\" align=\"left\">\n                                                        <Box pl={3}>\n                                                            {row.task}\n                                                        </Box>\n                                                    </TableCell>\n                                                    <TableCell align=\"center\">{row.hours}</TableCell>\n                                                    <TableCell align=\"center\">{row.cost}</TableCell>\n                                                </TableRow>\n                                            );\n                                            })}\n                                        {emptyRows > 0 && (\n                                            <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                                            <TableCell colSpan={6} />\n                                            </TableRow>\n                                        )}\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                                <TablePagination\n                                rowsPerPageOptions={[5, 10, 25]}\n                                component=\"div\"\n                                count={rows.length}\n                                rowsPerPage={rowsPerPage}\n                                page={page}\n                                onChangePage={handleChangePage}\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\n                                />\n                            </Paper>\n                            <FormControlLabel\n                                control={<Switch checked={dense} onChange={handleChangeDense} />}\n                                label=\"Dense padding\"\n                            />\n                        </div>\n                        <br></br>\n                        {decoded === null ? (\n                            <div>\n                                <Button className=\"backToTasks\" onClick={() => history.push('/demo/tasks')}variant=\"contained\" color=\"primary\" style={{marginLeft: 10}}>Tasks</Button>\n                                <PDFDownloadLink className=\"btn btn-primary pdfDownloadLink\" document={<MyDocument name={showReport.name.toUpperCase()} tasks={showReport.tasks} weekStart={showReport.weekStart} weekEnd={showReport.weekEnd}/>} fileName={showReport.name + '-' + fullDate + '.pdf'}>\n                                    {({ blob, url, loading, error }) => (loading ? 'Loading document...' : `Download PDF`)}\n                                </PDFDownloadLink>\n                            </div>\n                        ) : (\n                            <PDFDownloadLink className=\"btn btn-primary pdfDownloadLink\" document={<MyDocument name={showReport.name.toUpperCase()} tasks={showReport.tasks} weekStart={showReport.weekStart} weekEnd={showReport.weekEnd}/>} fileName={showReport.name + '-' + fullDate + '.pdf'}>\n                                {({ blob, url, loading, error }) => (loading ? 'Loading document...' : `Download PDF`)}\n                            </PDFDownloadLink>\n                        )}\n                        </div> ) : ''}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Team;","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\engagementPDF.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\TableHead.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Timesheet\\TableHead.js",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":18,"column":10,"nodeType":"118","messageId":"119","endLine":18,"endColumn":16},{"ruleId":"120","severity":1,"message":"121","line":238,"column":8,"nodeType":"122","endLine":238,"endColumn":10,"suggestions":"123"},{"ruleId":"120","severity":1,"message":"124","line":90,"column":6,"nodeType":"122","endLine":90,"endColumn":8,"suggestions":"125"},{"ruleId":"120","severity":1,"message":"126","line":49,"column":8,"nodeType":"122","endLine":49,"endColumn":10,"suggestions":"127"},{"ruleId":"128","severity":1,"message":"129","line":38,"column":35,"nodeType":"130","messageId":"131","endLine":38,"endColumn":36,"suggestions":"132"},{"ruleId":"128","severity":1,"message":"129","line":38,"column":54,"nodeType":"130","messageId":"131","endLine":38,"endColumn":55,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":119,"column":54,"nodeType":"136","messageId":"137","endLine":119,"endColumn":56},{"ruleId":"134","severity":1,"message":"135","line":169,"column":57,"nodeType":"136","messageId":"137","endLine":169,"endColumn":59},{"ruleId":"128","severity":1,"message":"129","line":196,"column":35,"nodeType":"130","messageId":"131","endLine":196,"endColumn":36,"suggestions":"138"},{"ruleId":"128","severity":1,"message":"129","line":196,"column":54,"nodeType":"130","messageId":"131","endLine":196,"endColumn":55,"suggestions":"139"},{"ruleId":"134","severity":1,"message":"135","line":213,"column":54,"nodeType":"136","messageId":"137","endLine":213,"endColumn":56},{"ruleId":"134","severity":1,"message":"140","line":104,"column":55,"nodeType":"136","messageId":"141","endLine":104,"endColumn":57},{"ruleId":"134","severity":1,"message":"140","line":263,"column":51,"nodeType":"136","messageId":"141","endLine":263,"endColumn":53},{"ruleId":"120","severity":1,"message":"142","line":276,"column":8,"nodeType":"122","endLine":276,"endColumn":10,"suggestions":"143"},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"no-unused-vars","'decode' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'renderTasks'. Either include it or remove the dependency array.","ArrayExpression",["146"],"React Hook useEffect has missing dependencies: 'decoded.email', 'decoded.teamName', and 'props.userID'. Either include them or remove the dependency array.",["147"],"React Hook useEffect has missing dependencies: 'decoded' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["148"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["149","150"],["151","152"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["153","154"],["155","156"],"Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has missing dependencies: 'decoded', 'storeEngagementNames', and 'tempEngArr'. Either include them or remove the dependency array.",["157"],"no-global-assign","no-unsafe-negation",{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"messageId":"164","fix":"165","desc":"166"},{"messageId":"167","fix":"168","desc":"169"},{"messageId":"164","fix":"170","desc":"166"},{"messageId":"167","fix":"171","desc":"169"},{"messageId":"164","fix":"172","desc":"166"},{"messageId":"167","fix":"173","desc":"169"},{"messageId":"164","fix":"174","desc":"166"},{"messageId":"167","fix":"175","desc":"169"},{"desc":"176","fix":"177"},"Update the dependencies array to be: [renderTasks]",{"range":"178","text":"179"},"Update the dependencies array to be: [decoded.email, decoded.teamName, props.userID]",{"range":"180","text":"181"},"Update the dependencies array to be: [decoded, props]",{"range":"182","text":"183"},"removeEscape",{"range":"184","text":"185"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"186","text":"187"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"188","text":"185"},{"range":"189","text":"187"},{"range":"190","text":"185"},{"range":"191","text":"187"},{"range":"192","text":"185"},{"range":"193","text":"187"},"Update the dependencies array to be: [decoded, storeEngagementNames, tempEngArr]",{"range":"194","text":"195"},[8649,8651],"[renderTasks]",[2533,2535],"[decoded.email, decoded.teamName, props.userID]",[1246,1248],"[decoded, props]",[1096,1097],"",[1096,1096],"\\",[1115,1116],[1115,1115],[6176,6177],[6176,6176],[6195,6196],[6195,6195],[8731,8733],"[decoded, storeEngagementNames, tempEngArr]"]
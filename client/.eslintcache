[{"C:\\Users\\mehar\\github\\3-project\\client\\src\\index.js":"1","C:\\Users\\mehar\\github\\3-project\\client\\src\\App.js":"2","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Timesheet\\Timesheet.js":"3","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\ReactDND.js":"4","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\initial-data.js":"5","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\column.js":"6","C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\contexts\\UpdateToDoContext.js":"7","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\task.js":"8","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\NewTaskAddBox\\NewTaskAddBox.js":"9","C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\API.js":"10","C:\\Users\\mehar\\github\\3-project\\client\\src\\Auth.js":"11","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Landing\\Landing.js":"12","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Navbar\\Navbar.js":"13","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Login\\login.js":"14","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Register\\register.js":"15","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\LandingJumbo\\LandingJumbo.js":"16","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\BrandDescription\\BrandDescription.js":"17","C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\userFunctions.js":"18","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Tasks\\Tasks.js":"19","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Admin\\Admin.js":"20","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\Team.js":"21","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\TeamMember.js":"22"},{"size":349,"mtime":1611295645368,"results":"23","hashOfConfig":"24"},{"size":4723,"mtime":1612580767450,"results":"25","hashOfConfig":"24"},{"size":3982,"mtime":1612580531676,"results":"26","hashOfConfig":"24"},{"size":10048,"mtime":1612580531658,"results":"27","hashOfConfig":"24"},{"size":728,"mtime":1612581059748,"results":"28","hashOfConfig":"24"},{"size":2297,"mtime":1612494936230,"results":"29","hashOfConfig":"24"},{"size":115,"mtime":1611294788240,"results":"30","hashOfConfig":"24"},{"size":2753,"mtime":1612494978255,"results":"31","hashOfConfig":"24"},{"size":1013,"mtime":1611196455735,"results":"32","hashOfConfig":"24"},{"size":516,"mtime":1612580531694,"results":"33","hashOfConfig":"24"},{"size":454,"mtime":1612343868380,"results":"34","hashOfConfig":"24"},{"size":581,"mtime":1611743276228,"results":"35","hashOfConfig":"24"},{"size":5884,"mtime":1612493739758,"results":"36","hashOfConfig":"24"},{"size":2661,"mtime":1612148131135,"results":"37","hashOfConfig":"24"},{"size":9873,"mtime":1612347841592,"results":"38","hashOfConfig":"24"},{"size":730,"mtime":1611742718075,"results":"39","hashOfConfig":"24"},{"size":4022,"mtime":1611742743155,"results":"40","hashOfConfig":"24"},{"size":2137,"mtime":1612414513976,"results":"41","hashOfConfig":"24"},{"size":1758,"mtime":1612412466007,"results":"42","hashOfConfig":"24"},{"size":7440,"mtime":1612413938519,"results":"43","hashOfConfig":"24"},{"size":1550,"mtime":1612580531685,"results":"44","hashOfConfig":"24"},{"size":501,"mtime":1612511601591,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1qrquh3",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"C:\\Users\\mehar\\github\\3-project\\client\\src\\index.js",[],["94","95"],"C:\\Users\\mehar\\github\\3-project\\client\\src\\App.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Timesheet\\Timesheet.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\ReactDND.js",["96","97"],"import React, { useEffect, useState } from 'react';\n\n// react-beautiful-dnd\nimport '@atlaskit/css-reset';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\n\n// Utils\nimport UpdateToDoContext from '../../utils/contexts/UpdateToDoContext';\nimport API from '../../utils/apis/API';\n\n// Styling\nimport styled from 'styled-components';\nimport './ReactDND.css';\n\nconst Container = styled.div`\n  display:flex;\n`\n\nfunction ReactDND(props) {\n\n  // Used when task is moved in to the 'Puased' & 'Done' columns to record time for current day.\n  // One task may be worked on for multiple days\n  let dayToday = new Date().getDay();\n\n  const [ DND, setDND ] = useState(initialData);\n\n  useEffect(() => {\n    // Load tasks on component mount\n    loadTasks(props.userID);\n  }, []);\n  \n  // Updates state to reflect drag & drop result\n  const onDragEnd = result => {\n    const { destination, source, draggableId } = result\n\n    // Exit if task dragged outside of a droppable\n    if (!destination) {\n      return\n    }\n\n    // Check whether location of draggable changed\n    // Users may put draggable back into the same place\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return\n    }\n\n    const start = DND.columns[source.droppableId]\n    const finish = DND.columns[destination.droppableId]\n\n    // Moving tasks to a different position in the same column\n    if (start === finish) {\n      const updatedTaskIds = Array.from(start.taskIds)\n      updatedTaskIds.splice(source.index, 1)\n      updatedTaskIds.splice(destination.index, 0, draggableId)\n\n      const newColumn = {\n        ...start,\n        taskIds: updatedTaskIds\n      }\n\n      const newState = {\n        ...DND,\n        columns: {\n          ...DND.columns,\n          [newColumn.id]: newColumn\n        }\n      }\n\n      // Do not set state inside method that does an axios call as task movement lags.\n      setDND(newState);\n      updateUserBoard(newState);\n      return\n    }\n\n    // Moving tasks from 1 column to another\n    // Do not allow task to move back to 'To Do' column once it has been moved out\n    if ((start.id !== 'column-2' || start.id !== 'column-3' || start.id !== 'column-4') && finish.id !== 'column-1') {\n      const startTaskIds = Array.from(start.taskIds)\n        startTaskIds.splice(source.index, 1)\n        const newStart = {\n          ...start,\n          taskIds: startTaskIds\n      }\n  \n      const finishTaskIds = Array.from(finish.taskIds)\n        finishTaskIds.splice(destination.index, 0, draggableId)\n        const newFinish = {\n          ...finish,\n          taskIds: finishTaskIds\n      }\n    \n      let newState = {\n        ...DND,\n        columns: {\n          ...DND.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish\n        }\n      }\n\n      // Record the date task was moved into 'In Progress' column\n      if (finish.id === 'column-2') {\n\n        newState = {\n          ...DND, \n          tasks: { \n            ...DND.tasks,\n            [draggableId]: { ...DND.tasks[draggableId], inProgressDate: Date.now() }\n          },\n          columns: {\n            ...DND.columns,\n            [newStart.id]: newStart,\n            [newFinish.id]: newFinish\n          }\n        }\n        console.log(newState);\n      } \n\n      // Record the date task was moved FROM 'In Progress' column into 'Paused' column \n      else if (finish.id === 'column-3' && start.id === 'column-2')  {\n\n        let taskTime;\n        let totalTaskTime = 0;\n\n        // Calculate exact time (in miilliseconds) that task was in 'In Progress' column\n        if (DND.tasks[draggableId].inProgressDate !== 0) {\n          taskTime = Date.now() - DND.tasks[draggableId].inProgressDate;\n        }\n\n        const timeInSeconds = Math.round(taskTime / 1000);\n      \n        // Calculate total time it took to complete task\n        for (let i=1; i<6; i++) {\n          totalTaskTime += DND.tasks[draggableId].timesheet[i];\n        }\n        totalTaskTime+=timeInSeconds;\n\n        newState = {\n          ...DND, \n          tasks: { \n            ...DND.tasks,\n            [draggableId]: { ...DND.tasks[draggableId], pausedDate: Date.now(), timesheet: { ...DND.tasks[draggableId].timesheet, [`${dayToday}`]: DND.tasks[draggableId].timesheet[dayToday] + timeInSeconds }, totalTaskTime: totalTaskTime }\n          },\n          columns: {\n            ...DND.columns,\n            [newStart.id]: newStart,\n            [newFinish.id]: newFinish\n          }\n        } \n      }\n\n      // Record the date task was moved FROM 'In Progress' column into 'Done' column \n      else if (finish.id === 'column-4'  && start.id === 'column-2') {\n\n        let taskTime;\n        let totalTaskTime=0;\n\n        // Calculate exact time (in miilliseconds) that task was in 'In Progress' column\n        if (DND.tasks[draggableId].inProgressDate !== 0) {\n          taskTime = Date.now() - DND.tasks[draggableId].inProgressDate;\n        }\n\n        const timeInSeconds = Math.round(taskTime / 1000);\n\n        // Calculate total time it took to complete task\n        for (let i=1; i<6; i++) {\n          totalTaskTime += DND.tasks[draggableId].timesheet[i];\n        }\n        totalTaskTime+=timeInSeconds;\n\n        newState = {\n          ...DND, \n          tasks: { \n            ...DND.tasks,\n            [draggableId]: { ...DND.tasks[draggableId], doneDate: Date.now(), timesheet: { ...DND.tasks[draggableId].timesheet, [`${dayToday}`]: DND.tasks[draggableId].timesheet[dayToday] + timeInSeconds }, totalTaskTime: totalTaskTime }\n          },\n          columns: {\n            ...DND.columns,\n            [newStart.id]: newStart,\n            [newFinish.id]: newFinish\n          }\n        } \n      }\n      // console.log(newState);\n      // Do not set state inside method that does an axios call as task movement lags.\n      setDND(newState);\n      updateUserBoard(newState);\n    }\n  } \n\n  // Add new task to To do list \n  const addNewTask = () => {\n    const storeAllIDs = [];\n    let newTaskID;\n\n    // Loop through initial data to find out value of last key\n    for (let key in DND.tasks) {\n      if (DND.tasks.hasOwnProperty(key)) {\n          // console.log(`${key} : ${DND.tasks[key].content}`);\n          storeAllIDs.push(key.slice(-1));\n      }\n    }\n    \n    if (storeAllIDs.length !== 0) {\n      newTaskID = `task-${parseInt(Math.max(...storeAllIDs)) + 1}`;\n    } else {\n      newTaskID = 'task-1';\n    }\n\n    if (document.querySelector('.inputNewTaskContent').value !== \"\") {\n\n      // Add new task\n      // New timer instantiated on creation of new task\n      DND.tasks[newTaskID] = { id: newTaskID, content: document.querySelector('.inputNewTaskContent').value, inProgressDate: 0, pausedDate: 0, doneDate: 0, timesheet: {'1': 0, '2': 0, '3': 0, '4': 0, '5': 0}, totalTaskTime: 0 };\n\n      // ID of new task gets inserted into first column\n      const newToDos = {\n        _id: props.userID,\n        tasks: { ...DND.tasks },\n        columns: {\n          'column-1': {\n            id: 'column-1',\n            title: 'To do',\n            taskIds: [newTaskID, ...DND.columns['column-1'].taskIds]\n          },\n          'column-2': {\n            id: DND.columns['column-2'].id,\n            title: DND.columns['column-2'].title,\n            taskIds: [...DND.columns['column-2'].taskIds]\n          },\n          'column-3': {\n            id: DND.columns['column-3'].id,\n            title: DND.columns['column-3'].title,\n            taskIds: [...DND.columns['column-3'].taskIds]\n          },\n          'column-4': {\n            id: DND.columns['column-4'].id,\n            title: DND.columns['column-4'].title,\n            taskIds: [...DND.columns['column-4'].taskIds]\n          },            \n        },\n        columnOrder: [...DND.columnOrder],\n      }\n      // Do not set state inside method that does an axios call as task movement lags.\n      setDND(newToDos);\n      updateUserBoard(newToDos);\n\n      // console.log(newToDos);\n      document.querySelector('.inputNewTaskContent').value = \"\";\n    }\n  }\n\n  // Called from component inside task.js (2 levels down). Allows task content to be edited\n  const editTaskContent = (taskID, content) => {\n    const newState = {\n      ...DND, \n      tasks: {\n        ...DND.tasks,\n        [taskID]: { ...DND.tasks[taskID], content: content}\n      }\n    }\n\n    setDND(newState);\n    updateUserBoard(newState);\n  }\n\n  // Called from component inside task.js (2 levels down). Allows task to be deleted\n  const deleteTask = (taskID) => {\n    // console.log(taskID);\n    delete DND.tasks[taskID];\n\n    // Delete task from columns object as well\n    for (let key in DND.columns) {\n      DND.columns[key].taskIds.forEach((el, idx) => {\n        if (el === taskID) {\n          DND.columns[key].taskIds.splice(idx, 1);\n        }\n      })\n    }\n    // console.log(DND);\n    const newState = {\n      ...DND\n    };\n\n    setDND(newState);\n    updateUserBoard(newState);\n  }\n\n  // Get all tasks of the logged in user\n  const loadTasks = (userID) => {\n    // console.log(userID);\n    API.getUserBoard(userID)\n    .then(res => {\n      // console.log(res);\n      setDND(res.data)\n    })\n    .catch(err => console.log(err));\n  }\n\n  // Post task to /api/tasks route\n  const updateUserBoard = (taskData) => {\n    API.updateUserBoard(taskData)\n    .catch(err => console.log(err));\n  }\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Container>\n          {DND.columnOrder.map(columnId => {\n            const column = DND.columns[columnId]\n            const tasks = column.taskIds.map(\n                taskId => DND.tasks[taskId]\n          )\n\n          return (\n            <UpdateToDoContext.Provider value={addNewTask} key={column.id}>\n              <Column column={column} tasks={tasks} userID={props.userID} currState={DND} editTaskContentCB={editTaskContent} deleteTaskCB={deleteTask}/>\n            </UpdateToDoContext.Provider>\n          )\n        })}\n      </Container>\n    </DragDropContext>\n  )\n}\n\nexport default ReactDND;\n","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\initial-data.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\column.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\contexts\\UpdateToDoContext.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\task.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\NewTaskAddBox\\NewTaskAddBox.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\API.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\Auth.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Landing\\Landing.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Navbar\\Navbar.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Login\\login.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Register\\register.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\LandingJumbo\\LandingJumbo.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\BrandDescription\\BrandDescription.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\userFunctions.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Tasks\\Tasks.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Admin\\Admin.js",["98","99","100"],"import React, { Component } from 'react';\r\nimport jwt_decode from 'jwt-decode';\r\nimport API from '../../utils/apis/API';\r\nimport { registerUser, getUsers, getOneUser } from '../../utils/apis/userFunctions';\r\nimport initialData from '../../components/ReactDND/initial-data';\r\nimport './Admin.css';\r\n\r\nclass Admin extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            teamName: '',\r\n            first_name: '',\r\n            last_name: '',\r\n            email: '',\r\n            password: '',\r\n            admin: '',\r\n            firstLogin: '',\r\n            errors: {}\r\n        }\r\n    }\r\n    token = localStorage.usertoken;\r\n    decoded = jwt_decode(this.token);\r\n\r\n    handleValidation = () => {\r\n        let errors = {};\r\n        let formIsValid = true;\r\n\r\n        // email\r\n        const inputEmail = this.state.email;\r\n        const emailRegex = /^\\w+([\\.-]?\\w+)*@[a-z]+([\\.-]?[a-z]+)*(\\.[a-z]{2,4})+$/;\r\n        const emailResult = emailRegex.test(inputEmail);\r\n        if (!this.state.email.trim()) {\r\n            formIsValid = false;\r\n            errors[\"email\"] = \"Cannot be empty\";\r\n        }\r\n        else if (!emailResult) {\r\n            formIsValid = false;\r\n            errors[\"email\"] = \"Email is not valid\";\r\n        }\r\n        else {}\r\n\r\n\r\n        // firstName\r\n        if (!this.state.first_name.trim()) {\r\n            formIsValid = false;\r\n            errors[\"first_name\"] = \"Cannot be empty\";\r\n        }\r\n        else if (typeof this.state.first_name !== \"undefined\") {\r\n            if (!this.state.first_name.match(/^[a-zA-Z]+$/)) {\r\n                formIsValid = false;\r\n                errors[\"first_name\"] = \"Only letters\";\r\n            }\r\n        }\r\n        else {}\r\n\r\n        // lastName\r\n        if (!this.state.last_name.trim()) {\r\n            formIsValid = false;\r\n            errors[\"last_name\"] = \"Cannot be empty\";\r\n        }\r\n        else if (!this.state.last_name.match(/^[a-zA-Z]+$/)) {\r\n            formIsValid = false;\r\n            errors[\"last_name\"] = \"Only letters\";\r\n        }\r\n        else {}\r\n\r\n        this.setState({ errors: errors });\r\n        return formIsValid;\r\n    }\r\n\r\n    onChange = event => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        let errors= {};\r\n\r\n        event.preventDefault();\r\n        // console.log(this.decoded);\r\n        const userData = {\r\n            teamName: this.decoded.teamName.trim(),\r\n            first_name: this.state.first_name.trim(),\r\n            last_name: this.state.last_name.trim(),\r\n            email: this.state.email.trim(),\r\n            password: 'init01',\r\n            admin: false,\r\n            firstLogin: true\r\n        };\r\n\r\n        const validationResult = this.handleValidation();\r\n\r\n        if (validationResult) {\r\n            getUsers().then(async data => {\r\n                var destination = data.map(element => {\r\n                    if (element.email === this.state.email) {\r\n                        console.log('foundmatch');\r\n                        return true;\r\n                    }\r\n                }).filter(item => { return item; })[0];\r\n                // Check if email exists in db or not\r\n                if (!destination) {\r\n                    registerUser(userData).then(() => {\r\n                        getOneUser(userData).then(async res => {\r\n                            // console.log(res);\r\n                            initialData._id = res[0]._id;\r\n                            await API.createBoard(initialData).catch(err => console.log(err));\r\n                        })\r\n                    })\r\n                    .then(() => {\r\n                        // To clear form input fields on successful user registration\r\n                        this.setState({ \r\n                            first_name: \"\",\r\n                            last_name: \"\",\r\n                            email: \"\"\r\n                        })\r\n                        console.log(\"Form submitted\");\r\n                    })\r\n                }\r\n                else {\r\n                    errors[\"email\"] = \"Email already exists\";\r\n                    this.setState({ errors: errors });\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-12\">\r\n                        <h1 className=\"heading\">Admin ( {this.decoded.teamName} )</h1>\r\n                    </div>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-8\">\r\n                        <form onSubmit={this.onSubmit}>\r\n                            <h3>Add Team Members</h3>\r\n                            <div className='form-group'>\r\n                                <label htmlFor='first_name'>First Name</label>\r\n                                <input type='text'\r\n                                    refs='first_name'\r\n                                    className='form-control'\r\n                                    name='first_name'\r\n                                    placeholder='Enter First Name'\r\n                                    value={this.state.first_name}\r\n                                    onChange={this.onChange}\r\n                                />\r\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"first_name\"]}</span>\r\n                            </div>\r\n                            <div className='form-group'>\r\n                                <label htmlFor='last_name'>Last Name</label>\r\n                                <input type='text'\r\n                                    refs='last_name'\r\n                                    className='form-control'\r\n                                    name='last_name'\r\n                                    placeholder='Enter Last Name'\r\n                                    value={this.state.last_name}\r\n                                    onChange={this.onChange}\r\n                                />\r\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"last_name\"]}</span>\r\n                            </div>\r\n                            <div className='form-group'>\r\n                                <label htmlFor='email'>Email Address</label>\r\n                                <input type='email'\r\n                                    refs='email'\r\n                                    className='form-control'\r\n                                    name='email'\r\n                                    placeholder='Enter Email'\r\n                                    value={this.state.email}\r\n                                    onChange={this.onChange}\r\n                                />\r\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"email\"]}</span>\r\n                            </div>\r\n                            <button type='submit' className='btn btn-lg btn-primary btn-block'>Add</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <br></br> \r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-8\">\r\n                        <h3>Employee Timesheets</h3>\r\n                    </div>\r\n                </div>          \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Admin;","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\Team.js",["101","102","103","104"],"import React, { useEffect, useState } from 'react';\nimport jwt_decode from 'jwt-decode';\nimport { getTeamMembers } from '../../utils/apis/userFunctions';\nimport { useHistory } from 'react-router-dom';\nimport './style.css';\n\nfunction Team() {\n    \n    const history = useHistory();\n\n    const token = localStorage.usertoken;\n    const decoded = jwt_decode(token);\n\n    const [members, setMembers] = useState([]);\n    \n    useEffect(() => {\n        const tempMemberArr = [];\n        getTeamMembers(decoded.teamName).then(res => {\n            res.forEach(el => {\n                tempMemberArr.push({\n                    _id: el._id,\n                    name: el.first_name + \" \" + el.last_name\n                });\n            })\n            setMembers(tempMemberArr);\n        })\n    }, [])\n\n    const handleClick = event => {\n        const id = event.target.id;\n        history.push('/member/' + id);\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-sm-12\">\n                    <h1>{decoded.teamName}</h1>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-sm-6\">\n                    <ul className=\"member-list\" type=\"none\">\n                        {members.map(el => {\n                            return <li><button id={el._id} onClick={handleClick}>{el.name}</button></li>\n                        })}\n                    </ul>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Team;","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\TeamMember.js",[],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":32,"column":22,"nodeType":"111","messageId":"112","endLine":32,"endColumn":34},{"ruleId":"113","severity":1,"message":"114","line":45,"column":6,"nodeType":"115","endLine":45,"endColumn":8,"suggestions":"116"},{"ruleId":"117","severity":1,"message":"118","line":32,"column":35,"nodeType":"119","messageId":"120","endLine":32,"endColumn":36,"suggestions":"121"},{"ruleId":"117","severity":1,"message":"118","line":32,"column":54,"nodeType":"119","messageId":"120","endLine":32,"endColumn":55,"suggestions":"122"},{"ruleId":"123","severity":1,"message":"124","line":96,"column":52,"nodeType":"125","messageId":"126","endLine":96,"endColumn":54},{"ruleId":"109","severity":1,"message":"127","line":1,"column":17,"nodeType":"111","messageId":"112","endLine":1,"endColumn":26},{"ruleId":"109","severity":1,"message":"128","line":1,"column":28,"nodeType":"111","messageId":"112","endLine":1,"endColumn":36},{"ruleId":"109","severity":1,"message":"129","line":6,"column":8,"nodeType":"111","messageId":"112","endLine":6,"endColumn":11},{"ruleId":"109","severity":1,"message":"130","line":11,"column":11,"nodeType":"111","messageId":"112","endLine":11,"endColumn":18},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"no-unused-vars","'setTeamTasks' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'decoded.teamName' and 'props.userID'. Either include them or remove the dependency array.","ArrayExpression",["133"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["134","135"],["136","137"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useEffect' is defined but never used.","'useState' is defined but never used.","'API' is defined but never used.","'history' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"138","fix":"139"},{"messageId":"140","fix":"141","desc":"142"},{"messageId":"143","fix":"144","desc":"145"},{"messageId":"140","fix":"146","desc":"142"},{"messageId":"143","fix":"147","desc":"145"},"Update the dependencies array to be: [decoded.teamName, props.userID]",{"range":"148","text":"149"},"removeEscape",{"range":"150","text":"151"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"152","text":"153"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"154","text":"151"},{"range":"155","text":"153"},[1246,1248],"[decoded.teamName, props.userID]",[896,897],"",[896,896],"\\",[915,916],[915,915]]
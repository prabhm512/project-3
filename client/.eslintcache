[{"C:\\Users\\mehar\\github\\3-project\\client\\src\\index.js":"1","C:\\Users\\mehar\\github\\3-project\\client\\src\\App.js":"2","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Timesheet\\Timesheet.js":"3","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\ReactDND.js":"4","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\initial-data.js":"5","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\column.js":"6","C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\contexts\\UpdateToDoContext.js":"7","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\task.js":"8","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\NewTaskAddBox\\NewTaskAddBox.js":"9","C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\API.js":"10","C:\\Users\\mehar\\github\\3-project\\client\\src\\Auth.js":"11","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Landing\\Landing.js":"12","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Navbar\\Navbar.js":"13","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Login\\login.js":"14","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Register\\register.js":"15","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\LandingJumbo\\LandingJumbo.js":"16","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\BrandDescription\\BrandDescription.js":"17","C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\userFunctions.js":"18","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Tasks\\Tasks.js":"19","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Admin\\Admin.js":"20","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\Team.js":"21","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\Accordion.js":"22","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\engagementPDF.js":"23","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\TableHead.js":"24","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Timesheet\\TableHead.js":"25"},{"size":351,"mtime":1613022855922,"results":"26","hashOfConfig":"27"},{"size":5310,"mtime":1613302746668,"results":"28","hashOfConfig":"27"},{"size":9644,"mtime":1613369059203,"results":"29","hashOfConfig":"27"},{"size":14349,"mtime":1613312570261,"results":"30","hashOfConfig":"27"},{"size":803,"mtime":1613295722507,"results":"31","hashOfConfig":"27"},{"size":3149,"mtime":1613307118425,"results":"32","hashOfConfig":"27"},{"size":115,"mtime":1611294788240,"results":"33","hashOfConfig":"27"},{"size":7108,"mtime":1613313871683,"results":"34","hashOfConfig":"27"},{"size":1013,"mtime":1613289174603,"results":"35","hashOfConfig":"27"},{"size":683,"mtime":1612967803732,"results":"36","hashOfConfig":"27"},{"size":454,"mtime":1612343868380,"results":"37","hashOfConfig":"27"},{"size":2171,"mtime":1613353383515,"results":"38","hashOfConfig":"27"},{"size":5483,"mtime":1613293302207,"results":"39","hashOfConfig":"27"},{"size":2928,"mtime":1613314982478,"results":"40","hashOfConfig":"27"},{"size":11103,"mtime":1613314778336,"results":"41","hashOfConfig":"27"},{"size":741,"mtime":1613282226189,"results":"42","hashOfConfig":"27"},{"size":4022,"mtime":1611742743155,"results":"43","hashOfConfig":"27"},{"size":2665,"mtime":1612918056970,"results":"44","hashOfConfig":"27"},{"size":1755,"mtime":1613307677420,"results":"45","hashOfConfig":"27"},{"size":14618,"mtime":1613302262995,"results":"46","hashOfConfig":"27"},{"size":14280,"mtime":1613312326004,"results":"47","hashOfConfig":"27"},{"size":2615,"mtime":1613016517663,"results":"48","hashOfConfig":"27"},{"size":3881,"mtime":1613370415303,"results":"49","hashOfConfig":"27"},{"size":3367,"mtime":1613190008817,"results":"50","hashOfConfig":"27"},{"size":2300,"mtime":1613298517334,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1qrquh3",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"C:\\Users\\mehar\\github\\3-project\\client\\src\\index.js",[],["104","105"],"C:\\Users\\mehar\\github\\3-project\\client\\src\\App.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Timesheet\\Timesheet.js",["106"],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\ReactDND.js",["107"],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\initial-data.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\column.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\contexts\\UpdateToDoContext.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\task.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\NewTaskAddBox\\NewTaskAddBox.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\API.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\Auth.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Landing\\Landing.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Navbar\\Navbar.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Login\\login.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Register\\register.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\LandingJumbo\\LandingJumbo.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\BrandDescription\\BrandDescription.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\userFunctions.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Tasks\\Tasks.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Admin\\Admin.js",["108","109","110","111","112","113","114"],"import React, { Component } from 'react';\nimport jwt_decode from 'jwt-decode';\nimport API from '../../utils/apis/API';\nimport { registerUser, getUsers, getOneUser, registerEng, getOneTeam, removeUser } from '../../utils/apis/userFunctions';\nimport initialData from '../../components/ReactDND/initial-data';\nimport './Admin.css';\nimport { Modal } from 'react-bootstrap';\n\nclass Admin extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            teamName: '',\n            first_name: '',\n            last_name: '',\n            email: '',\n            password: '',\n            admin: false,\n            firstLogin: '',\n            engagement: '',\n            removeEmail: '',\n            empCost: 0,\n            removeAlertShow: false,\n            addAlertShow: false,\n            errors: {}\n        }\n    }\n    token = localStorage.usertoken;\n    decoded = jwt_decode(this.token);\n\n    handleValidation = () => {\n        let errors = {};\n        let formIsValid = true;\n\n        // email\n        const inputEmail = this.state.email;\n        const emailRegex = /^\\w+([\\.-]?\\w+)*@[a-z]+([\\.-]?[a-z]+)*(\\.[a-z]{2,4})+$/;\n        const emailResult = emailRegex.test(inputEmail);\n        if (!this.state.email.trim()) {\n            formIsValid = false;\n            errors[\"email\"] = \"Cannot be empty\";\n        }\n        else if (!emailResult) {\n            formIsValid = false;\n            errors[\"email\"] = \"Email is not valid\";\n        }\n        else {}\n\n\n        // firstName\n        if (!this.state.first_name.trim()) {\n            formIsValid = false;\n            errors[\"first_name\"] = \"Cannot be empty\";\n        }\n        else if (typeof this.state.first_name !== \"undefined\") {\n            if (!this.state.first_name.match(/^[a-zA-Z]+$/)) {\n                formIsValid = false;\n                errors[\"first_name\"] = \"Only letters\";\n            }\n        }\n        else {}\n\n        // lastName\n        if (!this.state.last_name.trim()) {\n            formIsValid = false;\n            errors[\"last_name\"] = \"Cannot be empty\";\n        }\n        else if (!this.state.last_name.match(/^[a-zA-Z]+$/)) {\n            formIsValid = false;\n            errors[\"last_name\"] = \"Only letters\";\n        }\n        else {}\n\n        // empCost\n        if (this.state.empCost === 0) {\n            formIsValid = false;\n            errors[\"empCost\"] = \"Cannot be equal to 0\";\n        }\n\n        this.setState({ errors: errors });\n        return formIsValid;\n    }\n\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    onAdminChange = event => {\n\n        if (event.target.value === \"Yes\") {\n            this.setState({ admin: true })\n        } else {\n            this.setState({ admin: false })\n        }\n    }\n\n    // Add new team member to db\n    onTeamMemberSubmit = (event) => {\n        let errors= {};\n\n        event.preventDefault();\n\n        const userData = {\n            teamName: this.decoded.teamName.trim(),\n            first_name: this.state.first_name.trim(),\n            last_name: this.state.last_name.trim(),\n            email: this.state.email.trim().toLowerCase(),\n            password: 'init01',\n            empCost: this.state.empCost,\n            admin: this.state.admin,\n            firstLogin: true\n        };\n\n        const validationResult = this.handleValidation();\n\n        if (validationResult) {\n            getUsers().then(async data => {\n                const destination = data.map(element => {\n                    if (element.email === this.state.email.trim().toLowerCase()) {\n                        console.log('foundmatch');\n                        return true;\n                    }\n                }).filter(item => { return item; })[0];\n                // Check if email exists in db or not\n                if (!destination) {\n                    registerUser(userData).then(() => {\n                        getOneUser(userData).then(async res => {\n                            // console.log(res);\n                            initialData._id = res[0]._id;\n                            initialData.teamName = res[0].teamName;\n                            initialData.empCost = res[0].empCost;\n                            await API.createBoard(initialData).catch(err => console.log(err));\n                        })\n                    })\n                    .then(() => {\n                        // To clear form input fields on successful user registration\n                        this.setState({ \n                            first_name: \"\",\n                            last_name: \"\",\n                            email: \"\",\n                            empCost: 0,\n                            addAlertShow: true\n                        })\n                    })\n                    .catch(err => console.log(err))\n                }\n                else {\n                    errors[\"email\"] = \"Email already exists\";\n                    this.setState({ errors: errors });\n                }\n            })\n        }\n    }\n\n    // Add new engagement to db\n    onEngagementsSubmit = event => {\n        let errors = {};\n\n        event.preventDefault();\n\n        const engData = {\n            engName: this.state.engagement.toLowerCase(),\n            teamName: this.decoded.teamName\n        }\n\n        getOneTeam(engData.teamName).then(async data => {\n\n            const destination = data.engagements.map(el => {\n                if (el === this.state.engagement.toLowerCase()) {\n                    errors['engagement'] = \"Your team is already using this name\";\n                    this.setState({ errors: errors });\n                    return true;\n                } \n            }).filter(item => { return item; })[0];\n\n            if (!destination) {\n                registerEng(engData);\n\n                this.setState({ \n                    engagement: \"\",\n                    errors: \"\"\n                })\n            }\n        })\n    }\n\n    onTeamMemberRemove = event => {\n        let errors = {};\n        let formIsValid = true;\n\n        event.preventDefault();\n\n        // Validate email\n        const inputEmail = this.state.removeEmail;\n        const emailRegex = /^\\w+([\\.-]?\\w+)*@[a-z]+([\\.-]?[a-z]+)*(\\.[a-z]{2,4})+$/;\n        const emailResult = emailRegex.test(inputEmail);\n\n        if (!this.state.removeEmail.trim()) {\n            formIsValid = false;\n            errors[\"removeEmail\"] = \"Cannot be empty\";\n        }\n        else if (!emailResult) {\n            formIsValid = false;\n            errors[\"removeEmail\"] = \"Email is not valid\";\n        }\n        else {}\n\n        this.setState({ errors: errors });\n\n        if (formIsValid) {\n            getUsers().then(async data => {\n                const destination = data.map(element => {\n                    if (element.email === this.state.removeEmail.trim().toLowerCase()) {\n                        return true;\n                    }\n                }).filter(item => { return item; })[0];\n                // Check if email exists in db or not\n                if (!destination) {\n                    errors[\"removeEmail\"] = \"No team member is registered with this email\";\n                    this.setState({ errors: errors });\n                }\n                else {\n                    getOneUser({ email: this.state.removeEmail }).then(res => {\n                        API.deleteBoard(res[0]._id);\n                    })\n                    removeUser(this.state.removeEmail);\n                    this.setState({ \n                        removeAlertShow: true,\n                        removeEmail: \"\"\n                    });\n                }\n            })  \n        }\n    }\n\n    render() {\n        return (\n            <div className=\"container adminForms\">\n                <div className=\"row\">\n                    <div className=\"col-sm-12\">\n                        <h1 className=\"heading\">Admin</h1>\n                    </div>\n                </div>\n                <br></br>\n                <div className=\"row\">\n                    <div className=\"col-sm-8\">\n                        <form onSubmit={this.onTeamMemberSubmit}>\n                            <h3>Add Team Members</h3>\n                            <div className='form-group'>\n                                <label htmlFor='first_name'>First Name</label>\n                                <input type='text'\n                                    refs='first_name'\n                                    className='form-control'\n                                    name='first_name'\n                                    placeholder='Enter First Name'\n                                    value={this.state.first_name}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"first_name\"]}</span>\n                            </div>\n                            <div className='form-group'>\n                                <label htmlFor='last_name'>Last Name</label>\n                                <input type='text'\n                                    refs='last_name'\n                                    className='form-control'\n                                    name='last_name'\n                                    placeholder='Enter Last Name'\n                                    value={this.state.last_name}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"last_name\"]}</span>\n                            </div>\n                            <div className='form-group'>\n                                <label htmlFor='email'>Email Address</label>\n                                <input type='email'\n                                    refs='email'\n                                    className='form-control'\n                                    name='email'\n                                    placeholder='Enter Email'\n                                    value={this.state.email}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"email\"]}</span>\n                            </div>\n                            <div className='form-group'>\n                                <label htmlFor='empCost'>Cost per hour</label>\n                                <input type='number'\n                                    refs='empCost'\n                                    className='form-control'\n                                    name='empCost'\n                                    placeholder='Enter Employee Cost (per hour)'\n                                    value={this.state.empCost}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"empCost\"]}</span>\n                            </div>\n                            <div className='form-group'>\n                                <label>Admin</label>&nbsp;\n                                <select name=\"admin\" onChange={this.onAdminChange}>\n                                    <option>No</option>\n                                    <option>Yes</option>\n                                </select>\n                            </div>\n                            <button type='submit' className='btn btn-lg btn-primary btn-block'>Add</button>\n                        </form>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <form onSubmit={this.onTeamMemberRemove}>\n                            <h3>Remove Team Members</h3>\n                            <div className='form-group'>\n                                <label htmlFor='removeEmail'>Email Address</label>\n                                <input type='email'\n                                    refs='removeEmail'\n                                    className='form-control'\n                                    name='removeEmail'\n                                    placeholder='Enter Email'\n                                    value={this.state.removeEmail}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"removeEmail\"]}</span>\n                            </div>\n                            <button type='submit' className='btn btn-lg btn-danger btn-block'>Remove</button>\n                        </form>\n                    </div>\n                </div>\n                <br></br> \n                <div className=\"row\">\n                    <div className=\"col-sm-8\">\n                        <h3>Add New Engagement</h3>\n                        <form onSubmit={this.onEngagementsSubmit}>\n                            <div className='form-group'>\n                                <label htmlFor='engagement'>Engagement Name</label>\n                                <input type='text'\n                                    refs='engagement'\n                                    className='form-control'\n                                    name='engagement'\n                                    placeholder='Enter Engagement Name'\n                                    value={this.state.engagement}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"engagement\"]}</span>\n                            </div>\n                            <button type='submit' className='btn btn-lg btn-primary btn-block'>Add</button>\n                        </form>\n                    </div>\n                </div> \n                <Modal                 \n                    show={this.state.addAlertShow}\n                    onHide={() => this.setState({ addAlertShow: false })}\n                    keyboard={false}>\n                    <Modal.Header className=\"addMemberAlert\" closeButton><b>Team Member successfully added!</b></Modal.Header>\n                </Modal>   \n                <Modal                 \n                    show={this.state.removeAlertShow}\n                    onHide={() => this.setState({ removeAlertShow: false })}\n                    keyboard={false}>\n                    <Modal.Header className=\"removeMemberAlert\" closeButton><b>Team Member successfully removed!</b></Modal.Header>\n                </Modal>         \n            </div>\n        )\n    }\n}\n\nexport default Admin;","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\Team.js",["115","116"],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\Accordion.js",["117","118"],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\engagementPDF.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\TableHead.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Timesheet\\TableHead.js",[],{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":159,"column":8,"nodeType":"125","endLine":159,"endColumn":10,"suggestions":"126"},{"ruleId":"123","severity":1,"message":"127","line":67,"column":6,"nodeType":"125","endLine":67,"endColumn":8,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":38,"column":35,"nodeType":"131","messageId":"132","endLine":38,"endColumn":36,"suggestions":"133"},{"ruleId":"129","severity":1,"message":"130","line":38,"column":54,"nodeType":"131","messageId":"132","endLine":38,"endColumn":55,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":119,"column":54,"nodeType":"137","messageId":"138","endLine":119,"endColumn":56},{"ruleId":"135","severity":1,"message":"136","line":169,"column":57,"nodeType":"137","messageId":"138","endLine":169,"endColumn":59},{"ruleId":"129","severity":1,"message":"130","line":196,"column":35,"nodeType":"131","messageId":"132","endLine":196,"endColumn":36,"suggestions":"139"},{"ruleId":"129","severity":1,"message":"130","line":196,"column":54,"nodeType":"131","messageId":"132","endLine":196,"endColumn":55,"suggestions":"140"},{"ruleId":"135","severity":1,"message":"136","line":213,"column":54,"nodeType":"137","messageId":"138","endLine":213,"endColumn":56},{"ruleId":"135","severity":1,"message":"141","line":96,"column":55,"nodeType":"137","messageId":"142","endLine":96,"endColumn":57},{"ruleId":"123","severity":1,"message":"143","line":250,"column":8,"nodeType":"125","endLine":250,"endColumn":10,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":6,"column":26,"nodeType":"147","messageId":"148","endLine":6,"endColumn":30},{"ruleId":"135","severity":1,"message":"141","line":60,"column":62,"nodeType":"137","messageId":"142","endLine":60,"endColumn":64},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'renderTasks'. Either include it or remove the dependency array.","ArrayExpression",["151"],"React Hook useEffect has missing dependencies: 'decoded.email', 'decoded.teamName', and 'props.userID'. Either include them or remove the dependency array.",["152"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["153","154"],["155","156"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["157","158"],["159","160"],"Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has a missing dependency: 'storeEngagementNames'. Either include it or remove the dependency array.",["161"],"no-unused-vars","'Text' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"messageId":"166","fix":"167","desc":"168"},{"messageId":"169","fix":"170","desc":"171"},{"messageId":"166","fix":"172","desc":"168"},{"messageId":"169","fix":"173","desc":"171"},{"messageId":"166","fix":"174","desc":"168"},{"messageId":"169","fix":"175","desc":"171"},{"messageId":"166","fix":"176","desc":"168"},{"messageId":"169","fix":"177","desc":"171"},{"desc":"178","fix":"179"},"Update the dependencies array to be: [renderTasks]",{"range":"180","text":"181"},"Update the dependencies array to be: [decoded.email, decoded.teamName, props.userID]",{"range":"182","text":"183"},"removeEscape",{"range":"184","text":"185"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"186","text":"187"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"188","text":"185"},{"range":"189","text":"187"},{"range":"190","text":"185"},{"range":"191","text":"187"},{"range":"192","text":"185"},{"range":"193","text":"187"},"Update the dependencies array to be: [storeEngagementNames]",{"range":"194","text":"195"},[5231,5233],"[renderTasks]",[1824,1826],"[decoded.email, decoded.teamName, props.userID]",[1096,1097],"",[1096,1096],"\\",[1115,1116],[1115,1115],[6176,6177],[6176,6176],[6195,6196],[6195,6195],[7717,7719],"[storeEngagementNames]"]
[{"C:\\Users\\mehar\\github\\3-project\\client\\src\\index.js":"1","C:\\Users\\mehar\\github\\3-project\\client\\src\\App.js":"2","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Timesheet\\Timesheet.js":"3","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\ReactDND.js":"4","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\initial-data.js":"5","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\column.js":"6","C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\contexts\\UpdateToDoContext.js":"7","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\task.js":"8","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\NewTaskAddBox\\NewTaskAddBox.js":"9","C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\API.js":"10","C:\\Users\\mehar\\github\\3-project\\client\\src\\Auth.js":"11","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Landing\\Landing.js":"12","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Navbar\\Navbar.js":"13","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Login\\login.js":"14","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Register\\register.js":"15","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\LandingJumbo\\LandingJumbo.js":"16","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\BrandDescription\\BrandDescription.js":"17","C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\userFunctions.js":"18","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Tasks\\Tasks.js":"19"},{"size":349,"mtime":1611295645368,"results":"20","hashOfConfig":"21"},{"size":1201,"mtime":1612160198081,"results":"22","hashOfConfig":"21"},{"size":3982,"mtime":1612059990198,"results":"23","hashOfConfig":"21"},{"size":10026,"mtime":1612063086435,"results":"24","hashOfConfig":"21"},{"size":736,"mtime":1611823992969,"results":"25","hashOfConfig":"21"},{"size":2275,"mtime":1611913302686,"results":"26","hashOfConfig":"21"},{"size":115,"mtime":1611294788240,"results":"27","hashOfConfig":"21"},{"size":2643,"mtime":1612170822191,"results":"28","hashOfConfig":"21"},{"size":1013,"mtime":1611196455735,"results":"29","hashOfConfig":"21"},{"size":516,"mtime":1611897587846,"results":"30","hashOfConfig":"21"},{"size":454,"mtime":1611742238223,"results":"31","hashOfConfig":"21"},{"size":581,"mtime":1611743276228,"results":"32","hashOfConfig":"21"},{"size":7708,"mtime":1612180415808,"results":"33","hashOfConfig":"21"},{"size":2661,"mtime":1612148131135,"results":"34","hashOfConfig":"21"},{"size":9489,"mtime":1612166299226,"results":"35","hashOfConfig":"21"},{"size":730,"mtime":1611742718075,"results":"36","hashOfConfig":"21"},{"size":4022,"mtime":1611742743155,"results":"37","hashOfConfig":"21"},{"size":1738,"mtime":1612178486268,"results":"38","hashOfConfig":"21"},{"size":8036,"mtime":1612147809382,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1qrquh3",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\mehar\\github\\3-project\\client\\src\\index.js",[],["80","81"],"C:\\Users\\mehar\\github\\3-project\\client\\src\\App.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Timesheet\\Timesheet.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\ReactDND.js",["82"],"import React, { useEffect, useState } from 'react';\n\n// react-beautiful-dnd\nimport '@atlaskit/css-reset';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\n\n// Utils\nimport UpdateToDoContext from '../../utils/contexts/UpdateToDoContext';\nimport API from '../../utils/apis/API';\n\n// Styling\nimport styled from 'styled-components';\nimport './ReactDND.css';\n\nconst Container = styled.div`\n  display:flex;\n`\n\nfunction ReactDND(props) {\n\n  // Used when task is moved in to the 'Puased' & 'Done' columns to record time for current day.\n  // One task may be worked on for multiple days\n  let dayToday = new Date().getDay();\n\n  const [ DND, setDND ] = useState(initialData);\n\n  useEffect(() => {\n    // Load tasks on component mount\n    loadTasks(props.userID);\n  }, []);\n  \n  // Updates state to reflect drag & drop result\n  const onDragEnd = result => {\n    const { destination, source, draggableId } = result\n\n    // Exit if task dragged outside of a droppable\n    if (!destination) {\n      return\n    }\n\n    // Check whether location of draggable changed\n    // Users may put draggable back into the same place\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return\n    }\n\n    const start = DND.columns[source.droppableId]\n    const finish = DND.columns[destination.droppableId]\n\n    // Moving tasks to a different position in the same column\n    if (start === finish) {\n      const updatedTaskIds = Array.from(start.taskIds)\n      updatedTaskIds.splice(source.index, 1)\n      updatedTaskIds.splice(destination.index, 0, draggableId)\n\n      const newColumn = {\n        ...start,\n        taskIds: updatedTaskIds\n      }\n\n      const newState = {\n        ...DND,\n        columns: {\n          ...DND.columns,\n          [newColumn.id]: newColumn\n        }\n      }\n\n      // Do not set state inside method that does an axios call as task movement lags.\n      setDND(newState);\n      updateUserBoard(newState);\n      return\n    }\n\n    // Moving tasks from 1 column to another\n    // Do not allow task to move back to 'To Do' column once it has been moved out\n    if ((start.id !== 'column-2' || start.id !== 'column-3' || start.id !== 'column-4') && finish.id !== 'column-1') {\n      const startTaskIds = Array.from(start.taskIds)\n        startTaskIds.splice(source.index, 1)\n        const newStart = {\n          ...start,\n          taskIds: startTaskIds\n      }\n  \n      const finishTaskIds = Array.from(finish.taskIds)\n        finishTaskIds.splice(destination.index, 0, draggableId)\n        const newFinish = {\n          ...finish,\n          taskIds: finishTaskIds\n      }\n    \n      let newState = {\n        ...DND,\n        columns: {\n          ...DND.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish\n        }\n      }\n\n      // Record the date task was moved into 'In Progress' column\n      if (finish.id === 'column-2') {\n\n        newState = {\n          ...DND, \n          tasks: { \n            ...DND.tasks,\n            [draggableId]: { ...DND.tasks[draggableId], inProgressDate: Date.now() }\n          },\n          columns: {\n            ...DND.columns,\n            [newStart.id]: newStart,\n            [newFinish.id]: newFinish\n          }\n        }\n        console.log(newState);\n      } \n\n      // Record the date task was moved FROM 'In Progress' column into 'Paused' column \n      else if (finish.id === 'column-3' && start.id === 'column-2')  {\n\n        let taskTime;\n        let totalTaskTime = 0;\n\n        // Calculate exact time (in miilliseconds) that task was in 'In Progress' column\n        if (DND.tasks[draggableId].inProgressDate !== 0) {\n          taskTime = Date.now() - DND.tasks[draggableId].inProgressDate;\n        }\n\n        const timeInSeconds = Math.round(taskTime / 1000);\n      \n        // Calculate total time it took to complete task\n        for (let i=1; i<6; i++) {\n          totalTaskTime += DND.tasks[draggableId].timesheet[i];\n        }\n        totalTaskTime+=timeInSeconds;\n\n        newState = {\n          ...DND, \n          tasks: { \n            ...DND.tasks,\n            [draggableId]: { ...DND.tasks[draggableId], pausedDate: Date.now(), timesheet: { ...DND.tasks[draggableId].timesheet, [`${dayToday}`]: DND.tasks[draggableId].timesheet[dayToday] + timeInSeconds }, totalTaskTime: totalTaskTime }\n          },\n          columns: {\n            ...DND.columns,\n            [newStart.id]: newStart,\n            [newFinish.id]: newFinish\n          }\n        } \n      }\n\n      // Record the date task was moved FROM 'In Progress' column into 'Done' column \n      else if (finish.id === 'column-4'  && start.id === 'column-2') {\n\n        let taskTime;\n        let totalTaskTime=0;\n\n        // Calculate exact time (in miilliseconds) that task was in 'In Progress' column\n        if (DND.tasks[draggableId].inProgressDate !== 0) {\n          taskTime = Date.now() - DND.tasks[draggableId].inProgressDate;\n        }\n\n        const timeInSeconds = Math.round(taskTime / 1000);\n\n        // Calculate total time it took to complete task\n        for (let i=1; i<6; i++) {\n          totalTaskTime += DND.tasks[draggableId].timesheet[i];\n        }\n        totalTaskTime+=timeInSeconds;\n\n        newState = {\n          ...DND, \n          tasks: { \n            ...DND.tasks,\n            [draggableId]: { ...DND.tasks[draggableId], doneDate: Date.now(), timesheet: { ...DND.tasks[draggableId].timesheet, [`${dayToday}`]: DND.tasks[draggableId].timesheet[dayToday] + timeInSeconds }, totalTaskTime: totalTaskTime }\n          },\n          columns: {\n            ...DND.columns,\n            [newStart.id]: newStart,\n            [newFinish.id]: newFinish\n          }\n        } \n      }\n      // console.log(newState);\n      // Do not set state inside method that does an axios call as task movement lags.\n      setDND(newState);\n      updateUserBoard(newState);\n    }\n  } \n\n  // Add new task to To do list \n  const addNewTask = () => {\n    const storeAllIDs = [];\n    let newTaskID;\n\n    // Loop through initial data to find out value of last key\n    for (let key in DND.tasks) {\n      if (DND.tasks.hasOwnProperty(key)) {\n          // console.log(`${key} : ${DND.tasks[key].content}`);\n          storeAllIDs.push(key.slice(-1));\n      }\n    }\n    \n    if (storeAllIDs.length !== 0) {\n      newTaskID = `task-${parseInt(Math.max(...storeAllIDs)) + 1}`;\n    } else {\n      newTaskID = 'task-1';\n    }\n\n    if (document.querySelector('.inputNewTaskContent').value !== \"\") {\n\n      // Add new task\n      // New timer instantiated on creation of new task\n      DND.tasks[newTaskID] = { id: newTaskID, content: document.querySelector('.inputNewTaskContent').value, inProgressDate: 0, pausedDate: 0, doneDate: 0, timesheet: {'1': 0, '2': 0, '3': 0, '4': 0, '5': 0}, totalTaskTime: 0 };\n\n      // ID of new task gets inserted into first column\n      const newToDos = {\n        _id: props.userID,\n        tasks: { ...DND.tasks },\n        columns: {\n          'column-1': {\n            id: 'column-1',\n            title: 'To do',\n            taskIds: [newTaskID, ...DND.columns['column-1'].taskIds]\n          },\n          'column-2': {\n            id: DND.columns['column-2'].id,\n            title: DND.columns['column-2'].title,\n            taskIds: [...DND.columns['column-2'].taskIds]\n          },\n          'column-3': {\n            id: DND.columns['column-3'].id,\n            title: DND.columns['column-3'].title,\n            taskIds: [...DND.columns['column-3'].taskIds]\n          },\n          'column-4': {\n            id: DND.columns['column-4'].id,\n            title: DND.columns['column-4'].title,\n            taskIds: [...DND.columns['column-4'].taskIds]\n          },            \n        },\n        columnOrder: [...DND.columnOrder],\n      }\n      // Do not set state inside method that does an axios call as task movement lags.\n      setDND(newToDos);\n      updateUserBoard(newToDos);\n\n      // console.log(newToDos);\n      document.querySelector('.inputNewTaskContent').value = \"\";\n    }\n  }\n\n  // Called from component inside task.js (2 levels down). Allows task content to be edited\n  const editTaskContent = (taskID, content) => {\n    const newState = {\n      ...DND, \n      tasks: {\n        ...DND.tasks,\n        [taskID]: { ...DND.tasks[taskID], content: content}\n      }\n    }\n\n    setDND(newState);\n    updateUserBoard(newState);\n  }\n\n  // Called from component inside task.js (2 levels down). Allows task to be deleted\n  const deleteTask = (taskID) => {\n    // console.log(taskID);\n    delete DND.tasks[taskID];\n\n    // Delete task from columns object as well\n    for (let key in DND.columns) {\n      DND.columns[key].taskIds.forEach((el, idx) => {\n        if (el === taskID) {\n          DND.columns[key].taskIds.splice(idx, 1);\n        }\n      })\n    }\n    // console.log(DND);\n    const newState = {\n      ...DND\n    };\n\n    setDND(newState);\n    updateUserBoard(newState);\n  }\n\n  // Get all tasks of the logged in user\n  const loadTasks = (userID) => {\n    // console.log(userID);\n    API.getUserBoard(userID)\n    .then(res => {\n      // console.log(res);\n      setDND(res.data)\n    })\n    .catch(err => console.log(err));\n  }\n\n  // Post task to /api/tasks route\n  const updateUserBoard = (taskData) => {\n    API.updateUserBoard(taskData)\n    .catch(err => console.log(err));\n  }\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Container>\n          {DND.columnOrder.map(columnId => {\n            const column = DND.columns[columnId]\n            const tasks = column.taskIds.map(\n                taskId => DND.tasks[taskId]\n          )\n\n          return (\n            <UpdateToDoContext.Provider value={addNewTask} key={column.id}>\n              <Column column={column} tasks={tasks} currState={DND} editTaskContentCB={editTaskContent} deleteTaskCB={deleteTask}/>\n            </UpdateToDoContext.Provider>\n          )\n        })}\n      </Container>\n    </DragDropContext>\n  )\n}\n\nexport default ReactDND;\n","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\initial-data.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\column.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\contexts\\UpdateToDoContext.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\task.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\NewTaskAddBox\\NewTaskAddBox.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\API.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\Auth.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Landing\\Landing.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Navbar\\Navbar.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Login\\login.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Register\\register.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\LandingJumbo\\LandingJumbo.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\BrandDescription\\BrandDescription.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\userFunctions.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Tasks\\Tasks.js",["83","84","85"],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":32,"column":6,"nodeType":"92","endLine":32,"endColumn":8,"suggestions":"93"},{"ruleId":"94","severity":1,"message":"95","line":35,"column":35,"nodeType":"96","messageId":"97","endLine":35,"endColumn":36,"suggestions":"98"},{"ruleId":"94","severity":1,"message":"95","line":35,"column":54,"nodeType":"96","messageId":"97","endLine":35,"endColumn":55,"suggestions":"99"},{"ruleId":"100","severity":1,"message":"101","line":98,"column":52,"nodeType":"102","messageId":"103","endLine":98,"endColumn":54},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.userID'. Either include it or remove the dependency array.","ArrayExpression",["106"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["107","108"],["109","110"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},{"messageId":"113","fix":"114","desc":"115"},{"messageId":"116","fix":"117","desc":"118"},{"messageId":"113","fix":"119","desc":"115"},{"messageId":"116","fix":"120","desc":"118"},"Update the dependencies array to be: [props.userID]",{"range":"121","text":"122"},"removeEscape",{"range":"123","text":"124"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"125","text":"126"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"127","text":"124"},{"range":"128","text":"126"},[837,839],"[props.userID]",[1017,1018],"",[1017,1017],"\\",[1036,1037],[1036,1036]]
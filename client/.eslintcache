[{"C:\\Users\\mehar\\github\\3-project\\client\\src\\index.js":"1","C:\\Users\\mehar\\github\\3-project\\client\\src\\App.js":"2","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Timesheet\\Timesheet.js":"3","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\ReactDND.js":"4","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\initial-data.js":"5","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\column.js":"6","C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\contexts\\UpdateToDoContext.js":"7","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\task.js":"8","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\NewTaskAddBox\\NewTaskAddBox.js":"9","C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\API.js":"10","C:\\Users\\mehar\\github\\3-project\\client\\src\\Auth.js":"11","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Landing\\Landing.js":"12","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Navbar\\Navbar.js":"13","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Login\\login.js":"14","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Register\\register.js":"15","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\LandingJumbo\\LandingJumbo.js":"16","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\BrandDescription\\BrandDescription.js":"17","C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\userFunctions.js":"18","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Tasks\\Tasks.js":"19","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Admin\\Admin.js":"20","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\Team.js":"21","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\Accordion.js":"22","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\engagementPDF.js":"23","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\Engagement.js":"24"},{"size":351,"mtime":1613022855922,"results":"25","hashOfConfig":"26"},{"size":5243,"mtime":1613020910936,"results":"27","hashOfConfig":"26"},{"size":6660,"mtime":1613015191266,"results":"28","hashOfConfig":"26"},{"size":14060,"mtime":1613030749077,"results":"29","hashOfConfig":"26"},{"size":803,"mtime":1612962744381,"results":"30","hashOfConfig":"26"},{"size":2433,"mtime":1612922636211,"results":"31","hashOfConfig":"26"},{"size":115,"mtime":1611294788240,"results":"32","hashOfConfig":"26"},{"size":6601,"mtime":1612961182538,"results":"33","hashOfConfig":"26"},{"size":1013,"mtime":1611196455735,"results":"34","hashOfConfig":"26"},{"size":683,"mtime":1612967803732,"results":"35","hashOfConfig":"26"},{"size":454,"mtime":1612343868380,"results":"36","hashOfConfig":"26"},{"size":581,"mtime":1611743276228,"results":"37","hashOfConfig":"26"},{"size":5884,"mtime":1612709039342,"results":"38","hashOfConfig":"26"},{"size":2890,"mtime":1612885681438,"results":"39","hashOfConfig":"26"},{"size":11052,"mtime":1612962043573,"results":"40","hashOfConfig":"26"},{"size":730,"mtime":1611742718075,"results":"41","hashOfConfig":"26"},{"size":4022,"mtime":1611742743155,"results":"42","hashOfConfig":"26"},{"size":2665,"mtime":1612918056970,"results":"43","hashOfConfig":"26"},{"size":1661,"mtime":1612967346521,"results":"44","hashOfConfig":"26"},{"size":14635,"mtime":1612962012941,"results":"45","hashOfConfig":"26"},{"size":5052,"mtime":1613119789154,"results":"46","hashOfConfig":"26"},{"size":2615,"mtime":1613016517663,"results":"47","hashOfConfig":"26"},{"size":3772,"mtime":1613119429709,"results":"48","hashOfConfig":"26"},{"size":482,"mtime":1613019003048,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1qrquh3",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\mehar\\github\\3-project\\client\\src\\index.js",[],["101","102"],"C:\\Users\\mehar\\github\\3-project\\client\\src\\App.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Timesheet\\Timesheet.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\ReactDND.js",["103"],"import React, { useEffect, useState } from 'react';\n\n// react-beautiful-dnd\nimport '@atlaskit/css-reset';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\n\n// Utils\nimport UpdateToDoContext from '../../utils/contexts/UpdateToDoContext';\nimport API from '../../utils/apis/API';\nimport { getOneTeam, getTeamMembers, getOneUser } from '../../utils/apis/userFunctions';\nimport jwt_decode from 'jwt-decode';\nimport uniqid from 'uniqid';\n\n// Styling\nimport styled from 'styled-components';\nimport './ReactDND.css';\n\nconst Container = styled.div`\n  display:flex;\n`\n\nfunction ReactDND(props) {\n\n  // Used when task is moved in to the 'Puased' & 'Done' columns to record time for current day.\n  // One task may be worked on for multiple days\n  let dayToday = new Date().getDay();\n\n  const token = localStorage.usertoken;\n  const decoded = jwt_decode(token);\n\n  initialData.teamName = decoded.teamName;\n  const [ DND, setDND ] = useState(initialData);\n\n  // List of all enagagements of the team that the logged in user works for\n  const [engs, setEngs] = useState([]);\n\n  // List of all members in team\n  const [members, setMembers] = useState([]);\n\n  useEffect(() => {\n    // Load tasks on component mount\n    loadTasks(props.userID);\n\n    // Store all engagements of the logged in user's team\n    getOneTeam(decoded.teamName).then(res => {\n      const tempEngArr = [];\n\n      res.engagements.forEach(el => {\n        tempEngArr.push({ engName: el })\n      })\n      setEngs(tempEngArr);\n    })\n\n    getTeamMembers(decoded.teamName).then(res => {\n\n      const tempMembersArr = [];\n\n      res.forEach(el => {\n        if (el.email !== decoded.email) {\n          tempMembersArr.push(el.email);\n        }\n      })\n      setMembers(tempMembersArr);\n    })\n  }, []);\n  \n  // Updates state to reflect drag & drop result\n  const onDragEnd = result => {\n    const { destination, source, draggableId } = result\n\n    // Exit if task dragged outside of a droppable\n    if (!destination) {\n      return\n    }\n\n    // Check whether location of draggable changed\n    // Users may put draggable back into the same place\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return\n    }\n\n    const start = DND.columns[source.droppableId]\n    const finish = DND.columns[destination.droppableId]\n\n    // Moving tasks to a different position in the same column\n    if (start === finish) {\n      const updatedTaskIds = Array.from(start.taskIds)\n      updatedTaskIds.splice(source.index, 1)\n      updatedTaskIds.splice(destination.index, 0, draggableId)\n\n      const newColumn = {\n        ...start,\n        taskIds: updatedTaskIds\n      }\n\n      const newState = {\n        ...DND,\n        columns: {\n          ...DND.columns,\n          [newColumn.id]: newColumn\n        }\n      }\n\n      // Do not set state inside method that does an axios call as task movement lags.\n      setDND(newState);\n      API.updateUserBoard(newState);\n      return\n    }\n\n    // Moving tasks from 1 column to another\n    // Do not allow task to move back to 'To Do' column once it has been moved out\n    if ((start.id !== 'column-2' || start.id !== 'column-3' || start.id !== 'column-4') && finish.id !== 'column-1') {\n      const startTaskIds = Array.from(start.taskIds)\n        startTaskIds.splice(source.index, 1)\n        const newStart = {\n          ...start,\n          taskIds: startTaskIds\n      }\n  \n      const finishTaskIds = Array.from(finish.taskIds)\n        finishTaskIds.splice(destination.index, 0, draggableId)\n        const newFinish = {\n          ...finish,\n          taskIds: finishTaskIds\n      }\n    \n      let newState = {\n        ...DND,\n        columns: {\n          ...DND.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish\n        }\n      }\n\n      // Record the date task was moved into 'In Progress' column\n      if (finish.id === 'column-2') {\n\n        newState = {\n          ...DND, \n          tasks: { \n            ...DND.tasks,\n            [draggableId]: { ...DND.tasks[draggableId], inProgressDate: Date.now() }\n          },\n          columns: {\n            ...DND.columns,\n            [newStart.id]: newStart,\n            [newFinish.id]: newFinish\n          }\n        }\n      } \n\n      // Record the date task was moved FROM 'In Progress' column into 'Paused' column \n      else if (finish.id === 'column-3' && start.id === 'column-2')  {\n\n        let taskTime;\n        let totalTaskTime = 0;\n\n        // Calculate exact time (in miilliseconds) that task was in 'In Progress' column\n        if (DND.tasks[draggableId].inProgressDate !== 0) {\n          taskTime = Date.now() - DND.tasks[draggableId].inProgressDate;\n        }\n\n        const timeInSeconds = Math.round(taskTime / 1000);\n      \n        // Calculate total time it took to complete task\n        for (let i=1; i<6; i++) {\n          totalTaskTime += DND.tasks[draggableId].timesheet[i];\n        }\n        totalTaskTime+=timeInSeconds;\n\n        // Calculate cost of task\n        const cost = calculateCost(decoded.empCost, totalTaskTime);\n\n        newState = {\n          ...DND, \n          tasks: { \n            ...DND.tasks,\n            [draggableId]: { ...DND.tasks[draggableId], pausedDate: Date.now(), timesheet: { ...DND.tasks[draggableId].timesheet, [`${dayToday}`]: DND.tasks[draggableId].timesheet[dayToday] + timeInSeconds }, employees: { ...DND.tasks[draggableId].employees, [decoded.email]: { email: decoded.email, overallTime: totalTaskTime, cost: cost }} }\n          },\n          columns: {\n            ...DND.columns,\n            [newStart.id]: newStart,\n            [newFinish.id]: newFinish\n          }\n        }\n\n      }\n\n      // Record the date task was moved FROM 'In Progress' column into 'Done' column \n      else if (finish.id === 'column-4'  && start.id === 'column-2') {\n\n        let taskTime;\n        let totalTaskTime=0;\n\n        // Calculate exact time (in miilliseconds) that task was in 'In Progress' column\n        if (DND.tasks[draggableId].inProgressDate !== 0) {\n          taskTime = Date.now() - DND.tasks[draggableId].inProgressDate;\n        }\n\n        const timeInSeconds = Math.round(taskTime / 1000);\n\n        // Calculate total time it took to complete task\n        for (let i=1; i<6; i++) {\n          totalTaskTime += DND.tasks[draggableId].timesheet[i];\n        }\n        totalTaskTime+=timeInSeconds;\n\n         // Calculate cost of task\n        const cost = calculateCost(decoded.empCost, totalTaskTime); \n\n        newState = {\n          ...DND, \n          tasks: { \n            ...DND.tasks,\n            [draggableId]: { ...DND.tasks[draggableId], doneDate: Date.now(), timesheet: { ...DND.tasks[draggableId].timesheet, [`${dayToday}`]: DND.tasks[draggableId].timesheet[dayToday] + timeInSeconds }, employees: { ...DND.tasks[draggableId].employees, [decoded.email]: { email: decoded.email, overallTime: totalTaskTime, cost: cost }} }\n          },\n          columns: {\n            ...DND.columns,\n            [newStart.id]: newStart,\n            [newFinish.id]: newFinish\n          }\n        }\n\n      }\n      // console.log(newState);\n      // Do not set state inside method that does an axios call as task movement lags.\n      setDND(newState);\n      API.updateUserBoard(newState);\n    }\n  } \n\n  // Add new task to To do list \n  const addNewTask = () => {\n    let newTaskID = uniqid();\n\n    if (document.querySelector('.inputNewTaskContent').value !== \"\") {\n\n      // Add new task\n      // New timer instantiated on creation of new task\n      DND.tasks[newTaskID] = { id: newTaskID, content: document.querySelector('.inputNewTaskContent').value, inProgressDate: 0, pausedDate: 0, doneDate: 0, timesheet: {'1': 0, '2': 0, '3': 0, '4': 0, '5': 0}, engagement: '', employees: {}, transferred: false };\n\n      // ID of new task gets inserted into first column\n      const newToDos = {\n        _id: props.userID,\n        tasks: { ...DND.tasks },\n        columns: {\n          'column-1': {\n            id: 'column-1',\n            title: 'To do',\n            taskIds: [newTaskID, ...DND.columns['column-1'].taskIds]\n          },\n          'column-2': {\n            id: DND.columns['column-2'].id,\n            title: DND.columns['column-2'].title,\n            taskIds: [...DND.columns['column-2'].taskIds]\n          },\n          'column-3': {\n            id: DND.columns['column-3'].id,\n            title: DND.columns['column-3'].title,\n            taskIds: [...DND.columns['column-3'].taskIds]\n          },\n          'column-4': {\n            id: DND.columns['column-4'].id,\n            title: DND.columns['column-4'].title,\n            taskIds: [...DND.columns['column-4'].taskIds]\n          },            \n        },\n        columnOrder: [...DND.columnOrder],\n        teamName: decoded.teamName,\n        transferredTasks: { ...DND.transferredTasks },\n        empCost: decoded.empCost\n      }\n      // Do not set state inside method that does an axios call as task movement lags.\n      setDND(newToDos);\n      API.updateUserBoard(newToDos);\n\n      // console.log(newToDos);\n      document.querySelector('.inputNewTaskContent').value = \"\";\n    }\n  }\n\n  const calculateCost = (empCost, taskTime) => {\n\n    let cost = 0; \n\n    cost = Math.round((empCost * (taskTime/3600)) * (10^2)) / (10^2);\n    \n    return cost;\n  }\n\n  // Called from component inside task.js (2 levels down). Allows task content to be edited\n  const editTaskContent = (taskID, content) => {\n    const newState = {\n      ...DND, \n      tasks: {\n        ...DND.tasks,\n        [taskID]: { ...DND.tasks[taskID], content: content }\n      }\n    }\n\n    setDND(newState);\n    API.updateUserBoard(newState);\n  }\n\n  // Called from component inside task.js (2 levels down). Allows task to be deleted\n  // Second parameted optional because it is only needed when task is being transferred\n  const deleteTask = (taskID, newStateForLoggedInUser = 0) => {\n    let newState = {};\n    // console.log(taskID);\n    delete DND.tasks[taskID];\n\n    // Delete task from columns object as well\n    for (let key in DND.columns) {\n      DND.columns[key].taskIds.forEach((el, idx) => {\n        if (el === taskID) {\n          DND.columns[key].taskIds.splice(idx, 1);\n        }\n      })\n    }\n\n    if (newStateForLoggedInUser === 0) {\n      newState = {\n        ...DND\n      };\n    } \n    else {\n      newState = {\n        ...newStateForLoggedInUser\n      }\n    }\n\n    setDND(newState);\n    API.updateUserBoard(newState);\n  }\n\n  // Get all tasks of the logged in user\n  const loadTasks = (userID) => {\n    // console.log(userID);\n    API.getUserBoard(userID)\n    .then(res => {\n      // console.log(res);\n      setDND(res.data)\n    })\n    .catch(err => console.log(err));\n  }\n\n  const handleAssign = (taskID, radioValue) => {\n    const newState = {\n      ...DND, \n      tasks: {\n        ...DND.tasks,\n        [taskID]: { ...DND.tasks[taskID], engagement: radioValue }\n      }\n    }\n\n    setDND(newState);\n    API.updateUserBoard(newState);\n  }\n\n  const handleTransfer = (taskID, transferEmail) => {\n    getOneUser({email: transferEmail}).then(response => {\n      API.getUserBoard(response[0]._id).then(res => {\n\n        // Disable drag for task that is being transferred on logged in users board\n        const newStateForLoggedInUser = {\n          ...DND,\n          transferredTasks: {\n            ...DND.transferredTasks,\n            [taskID]: { id: taskID, transferredToId: res.data._id, transferredToEmail: transferEmail, timesheet: {...DND.tasks[taskID].timesheet} }\n          }\n        }\n\n        const newStateForTransferUser = {\n          ...res.data,\n          _id: res.data._id, \n          tasks: { [taskID]: {\n            id: taskID, \n            content: DND.tasks[taskID].content, \n            inProgressDate: 0, \n            pausedDate: 0, \n            doneDate: 0, \n            timesheet: {'1': 0, '2': 0, '3': 0, '4': 0, '5': 0}, \n            engagement: DND.tasks[taskID].engagement, \n            employees: { ...DND.tasks[taskID].employees },\n            transferred: false,\n          }, ...res.data.tasks },\n          columns: {\n            'column-1': {\n              id: 'column-1',\n              title: 'To do',\n              taskIds: [taskID, ...res.data.columns['column-1'].taskIds]\n            },\n            'column-2': {\n              id: res.data.columns['column-2'].id,\n              title: res.data.columns['column-2'].title,\n              taskIds: [...res.data.columns['column-2'].taskIds]\n            },\n            'column-3': {\n              id: res.data.columns['column-3'].id,\n              title: res.data.columns['column-3'].title,\n              taskIds: [...res.data.columns['column-3'].taskIds]\n            },\n            'column-4': {\n              id: res.data.columns['column-4'].id,\n              title: res.data.columns['column-4'].title,\n              taskIds: [...res.data.columns['column-4'].taskIds]\n            }\n          }\n        }\n\n        // Delete task from logged in users board\n        // This also updates the transferred object of the logged in users board\n        deleteTask(taskID, newStateForLoggedInUser);\n\n        // Update board of user who the task is beign transferred to\n        API.updateUserBoard(newStateForTransferUser);\n\n      })\n    })\n  }\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Container>\n          {DND.columnOrder.map(columnId => {\n            const column = DND.columns[columnId]\n            const tasks = column.taskIds.map(\n                taskId => DND.tasks[taskId]\n          )\n\n          return (\n            <UpdateToDoContext.Provider value={addNewTask} key={column.id}>\n              <Column column={column} tasks={tasks} userID={props.userID} currState={DND} editTaskContentCB={editTaskContent} deleteTaskCB={deleteTask} handleAssignCB={handleAssign} engagements={engs} members={members} handleTransferCB={handleTransfer}/>\n            </UpdateToDoContext.Provider>\n          )\n        })}\n      </Container>\n    </DragDropContext>\n  )\n}\n\nexport default ReactDND;\n","C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\initial-data.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\column.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\contexts\\UpdateToDoContext.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\ReactDND\\task.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\NewTaskAddBox\\NewTaskAddBox.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\API.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\Auth.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Landing\\Landing.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Navbar\\Navbar.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Login\\login.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\Register\\register.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\LandingJumbo\\LandingJumbo.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\components\\BrandDescription\\BrandDescription.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\utils\\apis\\userFunctions.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Tasks\\Tasks.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Admin\\Admin.js",["104","105","106","107","108","109","110"],"import React, { Component } from 'react';\nimport jwt_decode from 'jwt-decode';\nimport API from '../../utils/apis/API';\nimport { registerUser, getUsers, getOneUser, registerEng, getOneTeam, removeUser } from '../../utils/apis/userFunctions';\nimport initialData from '../../components/ReactDND/initial-data';\nimport './Admin.css';\nimport { Modal } from 'react-bootstrap';\n\nclass Admin extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            teamName: '',\n            first_name: '',\n            last_name: '',\n            email: '',\n            password: '',\n            admin: false,\n            firstLogin: '',\n            engagement: '',\n            removeEmail: '',\n            empCost: 0,\n            removeAlertShow: false,\n            addAlertShow: false,\n            errors: {}\n        }\n    }\n    token = localStorage.usertoken;\n    decoded = jwt_decode(this.token);\n\n    handleValidation = () => {\n        let errors = {};\n        let formIsValid = true;\n\n        // email\n        const inputEmail = this.state.email;\n        const emailRegex = /^\\w+([\\.-]?\\w+)*@[a-z]+([\\.-]?[a-z]+)*(\\.[a-z]{2,4})+$/;\n        const emailResult = emailRegex.test(inputEmail);\n        if (!this.state.email.trim()) {\n            formIsValid = false;\n            errors[\"email\"] = \"Cannot be empty\";\n        }\n        else if (!emailResult) {\n            formIsValid = false;\n            errors[\"email\"] = \"Email is not valid\";\n        }\n        else {}\n\n\n        // firstName\n        if (!this.state.first_name.trim()) {\n            formIsValid = false;\n            errors[\"first_name\"] = \"Cannot be empty\";\n        }\n        else if (typeof this.state.first_name !== \"undefined\") {\n            if (!this.state.first_name.match(/^[a-zA-Z]+$/)) {\n                formIsValid = false;\n                errors[\"first_name\"] = \"Only letters\";\n            }\n        }\n        else {}\n\n        // lastName\n        if (!this.state.last_name.trim()) {\n            formIsValid = false;\n            errors[\"last_name\"] = \"Cannot be empty\";\n        }\n        else if (!this.state.last_name.match(/^[a-zA-Z]+$/)) {\n            formIsValid = false;\n            errors[\"last_name\"] = \"Only letters\";\n        }\n        else {}\n\n        // empCost\n        if (this.state.empCost === 0) {\n            formIsValid = false;\n            errors[\"empCost\"] = \"Cannot be equal to 0\";\n        }\n\n        this.setState({ errors: errors });\n        return formIsValid;\n    }\n\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    onAdminChange = event => {\n\n        if (event.target.value === \"Yes\") {\n            this.setState({ admin: true })\n        } else {\n            this.setState({ admin: false })\n        }\n    }\n\n    // Add new team member to db\n    onTeamMemberSubmit = (event) => {\n        let errors= {};\n\n        event.preventDefault();\n\n        const userData = {\n            teamName: this.decoded.teamName.trim(),\n            first_name: this.state.first_name.trim(),\n            last_name: this.state.last_name.trim(),\n            email: this.state.email.trim().toLowerCase(),\n            password: 'init01',\n            empCost: this.state.empCost,\n            admin: this.state.admin,\n            firstLogin: true\n        };\n\n        const validationResult = this.handleValidation();\n\n        if (validationResult) {\n            getUsers().then(async data => {\n                const destination = data.map(element => {\n                    if (element.email === this.state.email.trim().toLowerCase()) {\n                        console.log('foundmatch');\n                        return true;\n                    }\n                }).filter(item => { return item; })[0];\n                // Check if email exists in db or not\n                if (!destination) {\n                    registerUser(userData).then(() => {\n                        getOneUser(userData).then(async res => {\n                            // console.log(res);\n                            initialData._id = res[0]._id;\n                            initialData.teamName = res[0].teamName;\n                            initialData.empCost = res[0].empCost;\n                            await API.createBoard(initialData).catch(err => console.log(err));\n                        })\n                    })\n                    .then(() => {\n                        // To clear form input fields on successful user registration\n                        this.setState({ \n                            first_name: \"\",\n                            last_name: \"\",\n                            email: \"\",\n                            empCost: 0,\n                            addAlertShow: true\n                        })\n                    })\n                    .catch(err => console.log(err))\n                }\n                else {\n                    errors[\"email\"] = \"Email already exists\";\n                    this.setState({ errors: errors });\n                }\n            })\n        }\n    }\n\n    // Add new engagement to db\n    onEngagementsSubmit = event => {\n        let errors = {};\n\n        event.preventDefault();\n\n        const engData = {\n            engName: this.state.engagement.toLowerCase(),\n            teamName: this.decoded.teamName\n        }\n\n        getOneTeam(engData.teamName).then(async data => {\n\n            const destination = data.engagements.map(el => {\n                if (el === this.state.engagement.toLowerCase()) {\n                    errors['engagement'] = \"Your team is already using this name\";\n                    this.setState({ errors: errors });\n                    return true;\n                } \n            }).filter(item => { return item; })[0];\n\n            if (!destination) {\n                registerEng(engData);\n\n                this.setState({ \n                    engagement: \"\",\n                    errors: \"\"\n                })\n            }\n        })\n    }\n\n    onTeamMemberRemove = event => {\n        let errors = {};\n        let formIsValid = true;\n\n        event.preventDefault();\n\n        // Validate email\n        const inputEmail = this.state.removeEmail;\n        const emailRegex = /^\\w+([\\.-]?\\w+)*@[a-z]+([\\.-]?[a-z]+)*(\\.[a-z]{2,4})+$/;\n        const emailResult = emailRegex.test(inputEmail);\n\n        if (!this.state.removeEmail.trim()) {\n            formIsValid = false;\n            errors[\"removeEmail\"] = \"Cannot be empty\";\n        }\n        else if (!emailResult) {\n            formIsValid = false;\n            errors[\"removeEmail\"] = \"Email is not valid\";\n        }\n        else {}\n\n        this.setState({ errors: errors });\n\n        if (formIsValid) {\n            getUsers().then(async data => {\n                const destination = data.map(element => {\n                    if (element.email === this.state.removeEmail.trim().toLowerCase()) {\n                        return true;\n                    }\n                }).filter(item => { return item; })[0];\n                // Check if email exists in db or not\n                if (!destination) {\n                    errors[\"removeEmail\"] = \"No team member is registered with this email\";\n                    this.setState({ errors: errors });\n                }\n                else {\n                    getOneUser({ email: this.state.removeEmail }).then(res => {\n                        API.deleteBoard(res[0]._id);\n                    })\n                    removeUser(this.state.removeEmail);\n                    this.setState({ \n                        removeAlertShow: true,\n                        removeEmail: \"\"\n                    });\n                }\n            })  \n        }\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-sm-12\">\n                        <h1 className=\"heading\">Admin ( {this.decoded.teamName} )</h1>\n                    </div>\n                </div>\n                <br></br>\n                <div className=\"row\">\n                    <div className=\"col-sm-8\">\n                        <form onSubmit={this.onTeamMemberSubmit}>\n                            <h3>Add Team Members</h3>\n                            <div className='form-group'>\n                                <label htmlFor='first_name'>First Name</label>\n                                <input type='text'\n                                    refs='first_name'\n                                    className='form-control'\n                                    name='first_name'\n                                    placeholder='Enter First Name'\n                                    value={this.state.first_name}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"first_name\"]}</span>\n                            </div>\n                            <div className='form-group'>\n                                <label htmlFor='last_name'>Last Name</label>\n                                <input type='text'\n                                    refs='last_name'\n                                    className='form-control'\n                                    name='last_name'\n                                    placeholder='Enter Last Name'\n                                    value={this.state.last_name}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"last_name\"]}</span>\n                            </div>\n                            <div className='form-group'>\n                                <label htmlFor='email'>Email Address</label>\n                                <input type='email'\n                                    refs='email'\n                                    className='form-control'\n                                    name='email'\n                                    placeholder='Enter Email'\n                                    value={this.state.email}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"email\"]}</span>\n                            </div>\n                            <div className='form-group'>\n                                <label htmlFor='empCost'>Cost per hour</label>\n                                <input type='number'\n                                    refs='empCost'\n                                    className='form-control'\n                                    name='empCost'\n                                    placeholder='Enter Employee Cost (per hour)'\n                                    value={this.state.empCost}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"empCost\"]}</span>\n                            </div>\n                            <div className='form-group'>\n                                <label>Admin</label>&nbsp;\n                                <select name=\"admin\" onChange={this.onAdminChange}>\n                                    <option>No</option>\n                                    <option>Yes</option>\n                                </select>\n                            </div>\n                            <button type='submit' className='btn btn-lg btn-primary btn-block'>Add</button>\n                        </form>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <form onSubmit={this.onTeamMemberRemove}>\n                            <h3>Remove Team Members</h3>\n                            <div className='form-group'>\n                                <label htmlFor='removeEmail'>Email Address</label>\n                                <input type='email'\n                                    refs='removeEmail'\n                                    className='form-control'\n                                    name='removeEmail'\n                                    placeholder='Enter Email'\n                                    value={this.state.removeEmail}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"removeEmail\"]}</span>\n                            </div>\n                            <button type='submit' className='btn btn-lg btn-danger btn-block'>Remove</button>\n                        </form>\n                    </div>\n                </div>\n                <br></br> \n                <div className=\"row\">\n                    <div className=\"col-sm-8\">\n                        <h3>Add New Engagement</h3>\n                        <form onSubmit={this.onEngagementsSubmit}>\n                            <div className='form-group'>\n                                <label htmlFor='engagement'>Engagement Name</label>\n                                <input type='text'\n                                    refs='engagement'\n                                    className='form-control'\n                                    name='engagement'\n                                    placeholder='Enter Engagement Name'\n                                    value={this.state.engagement}\n                                    onChange={this.onChange}\n                                />\n                                <span style={{ color: \"red\" }}>{this.state.errors[\"engagement\"]}</span>\n                            </div>\n                            <button type='submit' className='btn btn-lg btn-primary btn-block'>Add</button>\n                        </form>\n                    </div>\n                </div> \n                <Modal                 \n                    show={this.state.addAlertShow}\n                    onHide={() => this.setState({ addAlertShow: false })}\n                    keyboard={false}>\n                    <Modal.Header className=\"addMemberAlert\" closeButton><b>Team Member successfully added!</b></Modal.Header>\n                </Modal>   \n                <Modal                 \n                    show={this.state.removeAlertShow}\n                    onHide={() => this.setState({ removeAlertShow: false })}\n                    keyboard={false}>\n                    <Modal.Header className=\"removeMemberAlert\" closeButton><b>Team Member successfully removed!</b></Modal.Header>\n                </Modal>         \n            </div>\n        )\n    }\n}\n\nexport default Admin;","C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\Team.js",["111","112"],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\Accordion.js",["113","114"],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\engagementPDF.js",[],"C:\\Users\\mehar\\github\\3-project\\client\\src\\pages\\Team\\Engagement.js",[],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":67,"column":6,"nodeType":"121","endLine":67,"endColumn":8,"suggestions":"122"},{"ruleId":"123","severity":1,"message":"124","line":38,"column":35,"nodeType":"125","messageId":"126","endLine":38,"endColumn":36,"suggestions":"127"},{"ruleId":"123","severity":1,"message":"124","line":38,"column":54,"nodeType":"125","messageId":"126","endLine":38,"endColumn":55,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":119,"column":54,"nodeType":"131","messageId":"132","endLine":119,"endColumn":56},{"ruleId":"129","severity":1,"message":"130","line":169,"column":57,"nodeType":"131","messageId":"132","endLine":169,"endColumn":59},{"ruleId":"123","severity":1,"message":"124","line":196,"column":35,"nodeType":"125","messageId":"126","endLine":196,"endColumn":36,"suggestions":"133"},{"ruleId":"123","severity":1,"message":"124","line":196,"column":54,"nodeType":"125","messageId":"126","endLine":196,"endColumn":55,"suggestions":"134"},{"ruleId":"129","severity":1,"message":"130","line":213,"column":54,"nodeType":"131","messageId":"132","endLine":213,"endColumn":56},{"ruleId":"129","severity":1,"message":"135","line":54,"column":55,"nodeType":"131","messageId":"136","endLine":54,"endColumn":57},{"ruleId":"119","severity":1,"message":"137","line":98,"column":8,"nodeType":"121","endLine":98,"endColumn":10,"suggestions":"138"},{"ruleId":"139","severity":1,"message":"140","line":6,"column":26,"nodeType":"141","messageId":"142","endLine":6,"endColumn":30},{"ruleId":"129","severity":1,"message":"135","line":60,"column":62,"nodeType":"131","messageId":"136","endLine":60,"endColumn":64},"no-native-reassign",["143"],"no-negated-in-lhs",["144"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'decoded.email', 'decoded.teamName', and 'props.userID'. Either include them or remove the dependency array.","ArrayExpression",["145"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["146","147"],["148","149"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["150","151"],["152","153"],"Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has a missing dependency: 'storeEngagementNames'. Either include it or remove the dependency array.",["154"],"no-unused-vars","'Text' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},{"messageId":"157","fix":"158","desc":"159"},{"messageId":"160","fix":"161","desc":"162"},{"messageId":"157","fix":"163","desc":"159"},{"messageId":"160","fix":"164","desc":"162"},{"messageId":"157","fix":"165","desc":"159"},{"messageId":"160","fix":"166","desc":"162"},{"messageId":"157","fix":"167","desc":"159"},{"messageId":"160","fix":"168","desc":"162"},{"desc":"169","fix":"170"},"Update the dependencies array to be: [decoded.email, decoded.teamName, props.userID]",{"range":"171","text":"172"},"removeEscape",{"range":"173","text":"174"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"175","text":"176"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"177","text":"174"},{"range":"178","text":"176"},{"range":"179","text":"174"},{"range":"180","text":"176"},{"range":"181","text":"174"},{"range":"182","text":"176"},"Update the dependencies array to be: [storeEngagementNames]",{"range":"183","text":"184"},[1824,1826],"[decoded.email, decoded.teamName, props.userID]",[1096,1097],"",[1096,1096],"\\",[1115,1116],[1115,1115],[6176,6177],[6176,6176],[6195,6196],[6195,6195],[3207,3209],"[storeEngagementNames]"]